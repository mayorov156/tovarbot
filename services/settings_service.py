"""–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã"""

import logging
from typing import Optional, List, Any, Union
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select

from database.models import SystemSetting

logger = logging.getLogger(__name__)


class SettingsService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self, session: AsyncSession):
        self.session = session
    
    async def get_setting(self, key: str, default: Any = None) -> Any:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        try:
            stmt = select(SystemSetting).where(SystemSetting.key == key)
            result = await self.session.execute(stmt)
            setting = result.scalar_one_or_none()
            
            if not setting:
                return default
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–∏–ø
            return self._convert_value(setting.value, setting.value_type)
            
        except Exception as e:
            logger.error(f"Error getting setting {key}: {e}")
            return default
    
    async def set_setting(self, key: str, value: Any, description: str = None, category: str = "general", is_editable: bool = True) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–Ω–∞—á–µ–Ω–∏—è
            value_type = self._get_value_type(value)
            value_str = str(value)
            
            # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
            stmt = select(SystemSetting).where(SystemSetting.key == key)
            result = await self.session.execute(stmt)
            setting = result.scalar_one_or_none()
            
            if setting:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
                setting.value = value_str
                setting.value_type = value_type
                if description:
                    setting.description = description
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
                setting = SystemSetting(
                    key=key,
                    value=value_str,
                    value_type=value_type,
                    description=description,
                    category=category,
                    is_editable=is_editable
                )
                self.session.add(setting)
            
            await self.session.commit()
            logger.info(f"Setting {key} updated to {value}")
            return True
            
        except Exception as e:
            logger.error(f"Error setting {key}: {e}")
            await self.session.rollback()
            return False
    
    async def get_editable_settings(self, category: str = None) -> List[SystemSetting]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            stmt = select(SystemSetting).where(SystemSetting.is_editable == True)
            
            if category:
                stmt = stmt.where(SystemSetting.category == category)
                
            stmt = stmt.order_by(SystemSetting.category, SystemSetting.key)
            
            result = await self.session.execute(stmt)
            return list(result.scalars().all())
            
        except Exception as e:
            logger.error(f"Error getting editable settings: {e}")
            return []
    
    async def get_setting_by_id(self, setting_id: int) -> Optional[SystemSetting]:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ ID"""
        try:
            stmt = select(SystemSetting).where(SystemSetting.id == setting_id)
            result = await self.session.execute(stmt)
            return result.scalar_one_or_none()
            
        except Exception as e:
            logger.error(f"Error getting setting by id {setting_id}: {e}")
            return None
    
    async def get_categories(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            stmt = select(SystemSetting.category).distinct().where(SystemSetting.is_editable == True)
            result = await self.session.execute(stmt)
            return list(result.scalars().all())
            
        except Exception as e:
            logger.error(f"Error getting setting categories: {e}")
            return []
    
    async def initialize_default_settings(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        default_settings = [
            {
                "key": "referral_reward_percent",
                "value": 10.0,
                "description": "–ü—Ä–æ—Ü–µ–Ω—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã",
                "category": "referral",
                "is_editable": True
            },
            {
                "key": "support_username",
                "value": "your_support_username",
                "description": "Username —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (–±–µ–∑ @)",
                "category": "contacts",
                "is_editable": True
            },
            {
                "key": "earning_channel",
                "value": "https://t.me/your_earning_channel",
                "description": "–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –∑–∞—Ä–∞–±–æ—Ç–∫–∞",
                "category": "contacts",
                "is_editable": True
            },
            {
                "key": "welcome_message",
                "value": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω! üõç",
                "description": "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                "category": "messages",
                "is_editable": True
            },
            {
                "key": "min_withdrawal_amount",
                "value": 100.0,
                "description": "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤",
                "category": "financial",
                "is_editable": True
            }
        ]
        
        for setting_data in default_settings:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
            existing = await self.get_setting(setting_data["key"])
            if existing is None:
                await self.set_setting(**setting_data)
    
    def _convert_value(self, value_str: str, value_type: str) -> Any:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –Ω—É–∂–Ω—ã–π —Ç–∏–ø"""
        try:
            if value_type == "int":
                return int(value_str)
            elif value_type == "float":
                return float(value_str)
            elif value_type == "bool":
                return value_str.lower() in ("true", "1", "yes", "on")
            else:  # string
                return value_str
        except (ValueError, TypeError):
            return value_str
    
    def _get_value_type(self, value: Any) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –∑–Ω–∞—á–µ–Ω–∏—è"""
        if isinstance(value, bool):
            return "bool"
        elif isinstance(value, int):
            return "int"
        elif isinstance(value, float):
            return "float"
        else:
            return "string"
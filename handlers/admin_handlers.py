from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession


from services import OrderService, ProductService, UserService
from keyboards import (
    admin_menu_kb, admin_orders_kb, order_management_kb, back_button,
    warehouse_menu_kb, warehouse_products_kb, warehouse_product_actions_kb,
    warehouse_categories_kb
)
from utils import format_order_info, format_stats, AdminStates
from utils.states import AdminSettingsStates
from repositories import CategoryRepository
from config import settings

admin_router = Router()


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    return user_id in settings.ADMIN_IDS





@admin_router.message(Command("admin"))
async def admin_menu_command(message: Message):
    """–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    await message.answer(
        "‚öôÔ∏è <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>",
        reply_markup=admin_menu_kb()
    )


@admin_router.callback_query(F.data == "admin_menu")
async def admin_menu_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω –º–µ–Ω—é"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    await callback.message.edit_text(
        "‚öôÔ∏è <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>",
        reply_markup=admin_menu_kb()
    )
    await callback.answer()


@admin_router.callback_query(F.data == "admin_orders")
async def admin_orders_callback(callback: CallbackQuery, session: AsyncSession ):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    order_service = OrderService(session)
    orders = await order_service.get_pending_orders()
    
    if not orders:
        await callback.message.edit_text(
            "üì¶ –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏",
            reply_markup=back_button("admin_menu")
        )
        await callback.answer()
        return
    
    await callback.message.edit_text(
        "üì¶ –ó–∞–∫–∞–∑—ã –≤ –æ–∂–∏–¥–∞–Ω–∏–∏:",
        reply_markup=admin_orders_kb(orders)
    )
    await callback.answer()


@admin_router.callback_query(F.data.startswith("admin_order_"))
async def admin_order_details(callback: CallbackQuery, session: AsyncSession ):
    """–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    order_id = int(callback.data.split("_")[2])
    
    order_service = OrderService(session)
    order = await order_service.get_order_details(order_id)
    
    if not order:
        await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    text = "‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–º</b>\n\n"
    text += format_order_info(order)
    text += f"\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {order.user.first_name}"
    if order.user.username:
        text += f" (@{order.user.username})"
    
    await callback.message.edit_text(
        text,
        reply_markup=order_management_kb(order)
    )
    await callback.answer()


@admin_router.callback_query(F.data.startswith("deliver_order_"))
async def deliver_order_callback(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–¥–∞—á–∏ –∑–∞–∫–∞–∑–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    order_id = int(callback.data.split("_")[2])
    
    await state.update_data(order_id=order_id)
    await state.set_state(AdminStates.waiting_for_order_content)
    
    await callback.message.edit_text(
        "üìã –í–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –≤—ã–¥–∞—á–∏ –∑–∞–∫–∞–∑–∞:\n"
        "(–∫–ª—é—á–∏, –∫–æ–¥—ã, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ —Ç.–¥.)",
        reply_markup=back_button("admin_orders")
    )
    await callback.answer()


@admin_router.message(AdminStates.waiting_for_order_content)
async def process_order_delivery(message: Message, state: FSMContext, session: AsyncSession ):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–¥–∞—á—É –∑–∞–∫–∞–∑–∞"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    data = await state.get_data()
    order_id = data.get("order_id")
    digital_content = message.text
    
    order_service = OrderService(session)
    success, result_message = await order_service.deliver_order(
        order_id, digital_content, message.from_user.id
    )
    
    if success:
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        order = await order_service.get_order_details(order_id)
        user_text = "‚úÖ <b>–í–∞—à –∑–∞–∫–∞–∑ –≤—ã–¥–∞–Ω!</b>\n\n"
        user_text += format_order_info(order, show_content=True)
        
        try:
            await message.bot.send_message(
                chat_id=order.user_id,
                text=user_text
            )
        except Exception:
            pass  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
        
        await message.answer(
            f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω!",
            reply_markup=admin_menu_kb()
        )
    else:
        await message.answer(f"‚ùå {result_message}")
    
    await state.clear()


@admin_router.callback_query(F.data.startswith("admin_cancel_order_"))
async def admin_cancel_order_callback(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –æ—Ç–º–µ–Ω—É –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–æ–º"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    order_id = int(callback.data.split("_")[3])
    
    await state.update_data(order_id=order_id)
    await state.set_state(AdminStates.waiting_for_cancel_reason)
    
    await callback.message.edit_text(
        "‚ùå –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞:",
        reply_markup=back_button("admin_orders")
    )
    await callback.answer()


@admin_router.message(AdminStates.waiting_for_cancel_reason)
async def process_order_cancellation(message: Message, state: FSMContext, session: AsyncSession ):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–º–µ–Ω—É –∑–∞–∫–∞–∑–∞"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    data = await state.get_data()
    order_id = data.get("order_id")
    reason = message.text
    
    order_service = OrderService(session)
    success, result_message = await order_service.cancel_order(order_id, reason)
    
    if success:
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        order = await order_service.get_order_details(order_id)
        user_text = f"‚ùå <b>–í–∞—à –∑–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ–Ω–µ–Ω</b>\n\n"
        user_text += f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
        user_text += f"üí∞ –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å: {order.total_price:.2f}‚ÇΩ"
        
        try:
            await message.bot.send_message(
                chat_id=order.user_id,
                text=user_text
            )
        except Exception:
            pass  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
        
        await message.answer(
            f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ–Ω–µ–Ω!",
            reply_markup=admin_menu_kb()
        )
    else:
        await message.answer(f"‚ùå {result_message}")
    
    await state.clear()


@admin_router.callback_query(F.data == "admin_stats")
async def admin_stats_callback(callback: CallbackQuery, session: AsyncSession ):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    from repositories import UserRepository, OrderRepository
    from services.warehouse_service import WarehouseService
    from sqlalchemy import select, func
    from database.models import Order, OrderStatus, Product
    from datetime import datetime, timedelta
    
    user_repo = UserRepository(session)
    order_repo = OrderRepository(session)
    warehouse_service = WarehouseService(session)
    
    # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    user_stats = await user_repo.get_stats()
    order_stats = await order_repo.get_orders_stats(30)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–∫–∞–∑–∞–º —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    total_orders = await session.scalar(select(func.count(Order.id)))
    pending_orders = await session.scalar(select(func.count(Order.id)).where(Order.status == OrderStatus.PENDING.value))
    paid_orders = await session.scalar(select(func.count(Order.id)).where(Order.status == OrderStatus.PAID.value))
    delivered_orders = await session.scalar(select(func.count(Order.id)).where(Order.status == OrderStatus.DELIVERED.value))
    cancelled_orders = await session.scalar(select(func.count(Order.id)).where(Order.status == OrderStatus.CANCELLED.value))
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—ã–¥–∞—á–∞–º —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ —Å–∫–ª–∞–¥–∞
    warehouse_history = await warehouse_service.get_warehouse_history(100)
    given_products_count = len([log for log in warehouse_history if log.action == "give_product"])
    
    # –î–æ—Ö–æ–¥—ã
    total_revenue = await session.scalar(
        select(func.sum(Order.total_price)).where(Order.status == OrderStatus.DELIVERED.value)
    ) or 0
    
    pending_revenue = await session.scalar(
        select(func.sum(Order.total_price)).where(Order.status == OrderStatus.PENDING.value)
    ) or 0
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
    warehouse_stats = await warehouse_service.get_smart_warehouse_stats()
    
    # –¢–æ–ø –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π)  
    month_ago = datetime.now() - timedelta(days=30)
    top_buyers = await user_repo.get_top_buyers(5)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    text = "üìä <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    text += f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
    text += f"‚Ä¢ –í—Å–µ–≥–æ: {user_stats['total_users']}\n"
    text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π: {user_stats['active_users']}\n"
    text += f"‚Ä¢ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {user_stats['total_balance']:.2f}‚ÇΩ\n\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤
    text += f"üì¶ <b>–ó–∞–∫–∞–∑—ã (–≤—Å–µ–≥–æ: {total_orders or 0}):</b>\n"
    text += f"‚Ä¢ ‚è≥ –û–∂–∏–¥–∞—é—â–∏—Ö: {pending_orders or 0}\n"
    text += f"‚Ä¢ üí≥ –û–ø–ª–∞—á–µ–Ω–Ω—ã—Ö: {paid_orders or 0}\n"
    text += f"‚Ä¢ ‚úÖ –í—ã–¥–∞–Ω–Ω—ã—Ö: {delivered_orders or 0}\n"
    text += f"‚Ä¢ ‚ùå –û—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö: {cancelled_orders or 0}\n\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–¥–∞—á —Å–æ —Å–∫–ª–∞–¥–∞
    text += f"üè™ <b>–°–∫–ª–∞–¥:</b>\n"
    text += f"‚Ä¢ –¢–æ–≤–∞—Ä–æ–≤: {warehouse_stats['general']['total_products']}\n"
    text += f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {warehouse_stats['general']['total_categories']}\n"
    text += f"‚Ä¢ –í—ã–¥–∞–Ω–æ –∞–¥–º–∏–Ω–æ–º: {given_products_count}\n"
    if warehouse_stats['overflow']['total_overflow_products'] > 0:
        text += f"‚Ä¢ ‚ö†Ô∏è –î—É–±–ª–∏–∫–∞—Ç–æ–≤: {warehouse_stats['overflow']['total_overflow_products']}\n"
    text += "\n"
    
    # –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    text += f"üí∞ <b>–§–∏–Ω–∞–Ω—Å—ã:</b>\n"
    text += f"‚Ä¢ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {total_revenue:.2f}‚ÇΩ\n"
    text += f"‚Ä¢ –û–∂–∏–¥–∞–µ—Ç—Å—è: {pending_revenue:.2f}‚ÇΩ\n"
    if order_stats.get('monthly_revenue'):
        text += f"‚Ä¢ –ó–∞ –º–µ—Å—è—Ü: {order_stats['monthly_revenue']:.2f}‚ÇΩ\n"
    text += "\n"
    
    # –¢–æ–ø –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π
    if top_buyers:
        text += f"üèÜ <b>–¢–æ–ø –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π:</b>\n"
        for i, buyer in enumerate(top_buyers, 1):
            name = buyer.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            username = f"@{buyer.username}" if buyer.username else ""
            text += f"{i}. {name} {username}\n"
            text += f"   üí∞ {buyer.total_spent:.2f}‚ÇΩ ‚Ä¢ üì¶ {buyer.total_orders} –∑–∞–∫–∞–∑–æ–≤\n"
        text += "\n"
    
    # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏
    if order_stats.get('recent_orders'):
        text += f"üìà <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (7 –¥–Ω–µ–π):</b>\n"
        text += f"‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {order_stats.get('recent_orders', 0)}\n"
        text += f"‚Ä¢ –î–æ—Ö–æ–¥: {order_stats.get('recent_revenue', 0):.2f}‚ÇΩ\n"
    
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    warnings = []
    if pending_orders and pending_orders > 5:
        warnings.append(f"‚ö†Ô∏è –ú–Ω–æ–≥–æ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤ ({pending_orders})")
    
    if warehouse_stats['overflow']['total_overflow_products'] > 0:
        warnings.append(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ç–æ–≤–∞—Ä—ã ({warehouse_stats['overflow']['total_overflow_products']})")
    
    if user_stats['total_balance'] > 10000:
        warnings.append(f"üí∞ –í—ã—Å–æ–∫–∏–π –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({user_stats['total_balance']:.0f}‚ÇΩ)")
    
    if warnings:
        text += f"\nüö® <b>–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è:</b>\n"
        for warning in warnings:
            text += f"‚Ä¢ {warning}\n"
    
    await callback.message.edit_text(
        text,
        reply_markup=back_button("admin_menu")
    )
    await callback.answer()





# admin_categories —É–¥–∞–ª–µ–Ω - —É–ø—Ä–æ—â–µ–Ω–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å


@admin_router.callback_query(F.data == "admin_settings")
async def admin_settings_callback(callback: CallbackQuery, session: AsyncSession):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏—Å—Ç–µ–º—ã"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    from services.settings_service import SettingsService
    
    settings_service = SettingsService(session)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞—Ö–æ–¥–µ
    await settings_service.initialize_default_settings()
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    categories = await settings_service.get_categories()
    total_settings = len(await settings_service.get_editable_settings())
    
    text = (
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω—è—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–æ—Ç–∞ —á–µ—Ä–µ–∑ —É–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:\n\n"
        f"üìä <b>–î–æ—Å—Ç—É–ø–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫:</b> {total_settings}\n"
        f"üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–π:</b> {len(categories)}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤—Å–µ:"
    )
    
    from keyboards.inline_keyboards import admin_settings_menu_kb
    
    await callback.message.edit_text(
        text,
        reply_markup=admin_settings_menu_kb()
    )
    await callback.answer()


@admin_router.callback_query(F.data.startswith("admin_settings_category_"))
async def admin_settings_category_callback(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    category = callback.data.split("_")[-1]
    
    from services.settings_service import SettingsService
    from keyboards.inline_keyboards import admin_settings_category_kb, admin_settings_back_kb
    
    settings_service = SettingsService(session)
    settings = await settings_service.get_editable_settings(category)
    
    if not settings:
        await callback.message.edit_text(
            f"üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.title()}</b>\n\n‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
            reply_markup=admin_settings_back_kb()
        )
        return
    
    category_names = {
        "referral": "üí∞ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞",
        "contacts": "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", 
        "messages": "üí¨ –°–æ–æ–±—â–µ–Ω–∏—è",
       "financial": "üí≥ –§–∏–Ω–∞–Ω—Å—ã"
    }
    
    text = f"{category_names.get(category, f'üìÇ {category.title()}')}\n\n"
    text += f"–ù–∞–π–¥–µ–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {len(settings)}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
    
    await callback.message.edit_text(
        text,
        reply_markup=admin_settings_category_kb(settings, category)
    )
    await callback.answer()


# @admin_router.callback_query(F.data == "admin_settings_all")
# async def admin_settings_all_callback(callback: CallbackQuery, session: AsyncSession):
#     """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
#     if not is_admin(callback.from_user.id):
#         await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
#         return
#     
#     from services.settings_service import SettingsService
#     from keyboards.inline_keyboards import admin_settings_category_kb, admin_settings_back_kb
#     
#     settings_service = SettingsService(session)
#     settings = await settings_service.get_editable_settings()
#     
#     if not settings:
#         await callback.message.edit_text(
#             "üìã <b>–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
#             reply_markup=admin_settings_back_kb()
#         )
#         return
#     
#     await callback.message.edit_text(
#         f"üìã <b>–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n–í—Å–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {len(settings)}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
#         reply_markup=admin_settings_category_kb(settings, "all")
#     )
#     await callback.answer()


@admin_router.callback_query(F.data.startswith("admin_setting_edit_"))
async def admin_setting_edit_callback(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    setting_id = int(callback.data.split("_")[-1])
    
    from services.settings_service import SettingsService
    from keyboards.inline_keyboards import admin_setting_edit_kb, admin_settings_back_kb
    
    settings_service = SettingsService(session)
    setting = await settings_service.get_setting_by_id(setting_id)
    
    if not setting:
        await callback.message.edit_text(
            "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
            reply_markup=admin_settings_back_kb()
        )
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    current_value = setting.value
    if setting.value_type == "bool":
        current_value = "‚úÖ –í–∫–ª—é—á–µ–Ω–æ" if setting.value.lower() in ("true", "1", "yes", "on") else "‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ"
    
    text = (
        f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞: {setting.description or setting.key}</b>\n\n"
        f"üîë <b>–ö–ª—é—á:</b> <code>{setting.key}</code>\n"
        f"üìã <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {setting.category}\n"
        f"üî§ <b>–¢–∏–ø:</b> {setting.value_type}\n"
        f"üíæ <b>–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</b>\n<code>{current_value}</code>\n\n"
    )
    
    if setting.description:
        text += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {setting.description}"
    
    await callback.message.edit_text(
        text,
        reply_markup=admin_setting_edit_kb(setting)
    )
    await callback.answer()


@admin_router.callback_query(F.data.startswith("admin_setting_change_"))
async def admin_setting_change_callback(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ù–∞—á–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    setting_id = int(callback.data.split("_")[-1])
    
    from services.settings_service import SettingsService
    from keyboards.inline_keyboards import admin_settings_back_kb
    
    settings_service = SettingsService(session)
    setting = await settings_service.get_setting_by_id(setting_id)
    
    if not setting:
        await callback.message.edit_text(
            "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
            reply_markup=admin_settings_back_kb()
        )
        return
    
    await state.update_data(setting_id=setting_id)
    await state.set_state(AdminSettingsStates.waiting_for_value)
    
    # –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
    type_hints = {
        "string": "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
        "int": "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ:",
        "float": "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–º–æ–∂–Ω–æ —Å –¥–µ—Å—è—Ç–∏—á–Ω–æ–π —Ç–æ—á–∫–æ–π):",
        "bool": "–í–≤–µ–¥–∏—Ç–µ true/false, 1/0, yes/no, on/off:"
    }
    
    hint = type_hints.get(setting.value_type, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")
    
    text = (
        f"‚úèÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞:</b> {setting.description or setting.key}\n"
        f"üíæ <b>–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</b> <code>{setting.value}</code>\n"
        f"üî§ <b>–¢–∏–ø:</b> {setting.value_type}\n\n"
        f"{hint}"
    )
    
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"admin_setting_edit_{setting_id}")
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@admin_router.callback_query(F.data.startswith("admin_setting_toggle_"))
async def admin_setting_toggle_callback(callback: CallbackQuery, session: AsyncSession):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å boolean –Ω–∞—Å—Ç—Ä–æ–π–∫—É"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    setting_id = int(callback.data.split("_")[-1])
    
    from services.settings_service import SettingsService
    settings_service = SettingsService(session)
    
    setting = await settings_service.get_setting_by_id(setting_id)
    if not setting or setting.value_type != "bool":
        await callback.answer("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–æ–≥–∏—á–µ—Å–∫–æ–π", show_alert=True)
        return
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
    current_value = setting.value.lower() in ("true", "1", "yes", "on")
    new_value = not current_value
    
    success = await settings_service.set_setting(setting.key, new_value)
    
    if success:
        await callback.answer(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {new_value}")
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await admin_setting_edit_callback(callback, session)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", show_alert=True)


@admin_router.message(AdminSettingsStates.waiting_for_value)
async def admin_setting_value_handler(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    data = await state.get_data()
    setting_id = data.get("setting_id")
    
    from services.settings_service import SettingsService
    settings_service = SettingsService(session)
    
    setting = await settings_service.get_setting_by_id(setting_id)
    if not setting:
        await message.answer("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await state.clear()
        return
    
    new_value = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
    try:
        if setting.value_type == "int":
            int(new_value)
        elif setting.value_type == "float":
            float(new_value)
        elif setting.value_type == "bool":
            if new_value.lower() not in ("true", "false", "1", "0", "yes", "no", "on", "off"):
                raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ boolean –∑–Ω–∞—á–µ–Ω–∏–µ")
    except ValueError:
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        await message.answer(
            f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ç–∏–ø–∞ {setting.value_type}.\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∞.",
            reply_markup=InlineKeyboardBuilder().row(
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"admin_setting_edit_{setting_id}")
            ).as_markup()
        )
        return
    
    await state.update_data(new_value=new_value)
    await state.set_state(AdminSettingsStates.waiting_for_confirmation)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –∏–∑–º–µ–Ω–µ–Ω–∏—è
    old_display = setting.value
    new_display = new_value
    
    if setting.value_type == "bool":
        old_display = "‚úÖ –í–∫–ª—é—á–µ–Ω–æ" if setting.value.lower() in ("true", "1", "yes", "on") else "‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ"
        new_display = "‚úÖ –í–∫–ª—é—á–µ–Ω–æ" if new_value.lower() in ("true", "1", "yes", "on") else "‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ"
    
    text = (
        f"üîÑ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è</b>\n\n"
        f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞:</b> {setting.description or setting.key}\n\n"
        f"üì• <b>–°—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</b>\n<code>{old_display}</code>\n\n"
        f"üì§ <b>–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</b>\n<code>{new_display}</code>\n\n"
        f"‚ùì –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è?"
    )
    
    from keyboards.inline_keyboards import admin_setting_confirm_kb
    
    await message.answer(
        text,
        reply_markup=admin_setting_confirm_kb(setting_id)
    )


@admin_router.callback_query(F.data.startswith("admin_setting_confirm_"))
async def admin_setting_confirm_callback(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    setting_id = int(callback.data.split("_")[-1])
    data = await state.get_data()
    new_value = data.get("new_value")
    
    if not new_value:
        await callback.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", show_alert=True)
        return
    
    from services.settings_service import SettingsService
    from keyboards.inline_keyboards import admin_settings_back_kb
    
    settings_service = SettingsService(session)
    setting = await settings_service.get_setting_by_id(setting_id)
    
    if not setting:
        await callback.message.edit_text(
            "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
            reply_markup=admin_settings_back_kb()
        )
        await state.clear()
        return
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∫ –Ω—É–∂–Ω–æ–º—É —Ç–∏–ø—É
    converted_value = new_value
    if setting.value_type == "int":
        converted_value = int(new_value)
    elif setting.value_type == "float":
        converted_value = float(new_value)
    elif setting.value_type == "bool":
        converted_value = new_value.lower() in ("true", "1", "yes", "on")
    
    success = await settings_service.set_setting(setting.key, converted_value)
    
    if success:
        await callback.message.edit_text(
            f"‚úÖ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
            f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞:</b> {setting.description or setting.key}\n"
            f"üíæ <b>–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</b> <code>{new_value}</code>\n\n"
            f"–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–∏–ª—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ.",
            reply_markup=admin_settings_back_kb()
        )
        await callback.answer("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    else:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=admin_settings_back_kb()
        )
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", show_alert=True)
    
    await state.clear()


@admin_router.callback_query(F.data == "admin_users")
async def admin_users_callback(callback: CallbackQuery, session: AsyncSession):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    from repositories import UserRepository
    user_repo = UserRepository(session)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = await user_repo.get_stats()
    
    text = (
        "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n"
        "üìä <b>–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π: {stats['active_users']}\n"
        f"‚Ä¢ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {stats['total_balance']:.2f}‚ÇΩ\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
    )
    
    from keyboards.inline_keyboards import admin_users_menu_kb
    
    await callback.message.edit_text(
        text,
        reply_markup=admin_users_menu_kb()
    )
    await callback.answer()


@admin_router.callback_query(F.data == "admin_users_top_buyers")
async def admin_users_top_buyers_callback(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    from repositories import UserRepository
    user_repo = UserRepository(session)
    top_buyers = await user_repo.get_top_buyers(10)
    
    text = "üèÜ <b>–¢–æ–ø –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π</b>\n\n"
    
    if top_buyers:
        for i, user in enumerate(top_buyers, 1):
            name = user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            username = f"@{user.username}" if user.username else ""
            text += f"{i}. {name} {username}\n"
            text += f"   üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {user.total_spent:.2f}‚ÇΩ\n"
            text += f"   üì¶ –ó–∞–∫–∞–∑–æ–≤: {user.total_orders}\n\n"
    else:
        text += "üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π"
    
    from keyboards.inline_keyboards import admin_users_back_kb
    
    await callback.message.edit_text(
        text,
        reply_markup=admin_users_back_kb()
    )
    await callback.answer()


@admin_router.callback_query(F.data == "admin_users_active")
async def admin_users_active_callback(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    from repositories import UserRepository
    user_repo = UserRepository(session)
    active_users = await user_repo.get_active_users(10)
    
    text = "üìà <b>–°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b>\n\n"
    
    if active_users:
        for i, user in enumerate(active_users, 1):
            name = user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            username = f"@{user.username}" if user.username else ""
            text += f"{i}. {name} {username}\n"
            text += f"   üì¶ –ó–∞–∫–∞–∑–æ–≤: {user.total_orders}\n"
            text += f"   üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {user.total_spent:.2f}‚ÇΩ\n\n"
    else:
        text += "üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    
    from keyboards.inline_keyboards import admin_users_back_kb
    
    await callback.message.edit_text(
        text,
        reply_markup=admin_users_back_kb()
    )
    await callback.answer()


@admin_router.callback_query(F.data == "admin_users_recent")
async def admin_users_recent_callback(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    from repositories import UserRepository
    user_repo = UserRepository(session)
    recent_users = await user_repo.get_recent_users(10)
    
    text = "üÜï <b>–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–∑–∞ 7 –¥–Ω–µ–π)</b>\n\n"
    
    if recent_users:
        for i, user in enumerate(recent_users, 1):
            name = user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            username = f"@{user.username}" if user.username else ""
            reg_date = user.created_at.strftime("%d.%m.%Y %H:%M") if hasattr(user, 'created_at') and user.created_at else "–î–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"
            text += f"{i}. {name} {username}\n"
            text += f"   üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {reg_date}\n"
            text += f"   üì¶ –ó–∞–∫–∞–∑–æ–≤: {user.total_orders}\n\n"
    else:
        text += "üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π"
    
    from keyboards.inline_keyboards import admin_users_back_kb
    
    await callback.message.edit_text(
        text,
        reply_markup=admin_users_back_kb()
    )
    await callback.answer()


@admin_router.callback_query(F.data == "admin_users_balance")
async def admin_users_balance_callback(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–∞–ª–∞–Ω—Å–æ–º"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    from repositories import UserRepository
    user_repo = UserRepository(session)
    users_with_balance = await user_repo.get_users_with_balance(10)
    
    text = "üí∞ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –±–∞–ª–∞–Ω—Å–æ–º</b>\n\n"
    
    if users_with_balance:
        total_balance = sum(user.balance for user in users_with_balance)
        text += f"üí≥ <b>–û–±—â–∏–π –±–∞–ª–∞–Ω—Å —Ç–æ–ø-{len(users_with_balance)}: {total_balance:.2f}‚ÇΩ</b>\n\n"
        
        for i, user in enumerate(users_with_balance, 1):
            name = user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            username = f"@{user.username}" if user.username else ""
            text += f"{i}. {name} {username}\n"
            text += f"   üí∞ –ë–∞–ª–∞–Ω—Å: {user.balance:.2f}‚ÇΩ\n"
            text += f"   üì¶ –ó–∞–∫–∞–∑–æ–≤: {user.total_orders}\n\n"
    else:
        text += "üì≠ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º"
    
    from keyboards.inline_keyboards import admin_users_back_kb
    
    await callback.message.edit_text(
        text,
        reply_markup=admin_users_back_kb()
    )
    await callback.answer()


@admin_router.callback_query(F.data == "admin_users_stats")
async def admin_users_stats_callback(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    from repositories import UserRepository
    from sqlalchemy import select, func
    from database.models import User
    
    user_repo = UserRepository(session)
    stats = await user_repo.get_stats()
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    users_with_orders = await session.scalar(select(func.count(User.id)).where(User.total_orders > 0))
    users_with_balance = await session.scalar(select(func.count(User.id)).where(User.balance > 0))
    avg_orders = await session.scalar(select(func.avg(User.total_orders)).where(User.total_orders > 0)) or 0
    avg_spent = await session.scalar(select(func.avg(User.total_spent)).where(User.total_spent > 0)) or 0
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏
    from datetime import datetime, timedelta
    recent_users_count = await session.scalar(
        select(func.count(User.id)).where(
            User.created_at >= datetime.now() - timedelta(days=7)
        )
    ) if hasattr(User, 'created_at') else 0
    
    text = (
        "üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
        f"üë• <b>–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        f"‚Ä¢ –° –∑–∞–∫–∞–∑–∞–º–∏: {users_with_orders or 0} ({(users_with_orders or 0) / max(stats['total_users'], 1) * 100:.1f}%)\n"
        f"‚Ä¢ –° –±–∞–ª–∞–Ω—Å–æ–º: {users_with_balance or 0}\n"
        f"‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {recent_users_count or 0}\n\n"
        f"üí∞ <b>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
        f"‚Ä¢ –û–±—â–∏–π –æ–±–æ—Ä–æ—Ç: {sum(u.total_spent for u in await user_repo.get_top_buyers(1000)):.2f}‚ÇΩ\n"
        f"‚Ä¢ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {stats['total_balance']:.2f}‚ÇΩ\n"
        f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {avg_spent:.2f}‚ÇΩ\n\n"
        f"üìà <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>\n"
        f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {avg_orders:.1f}\n"
        f"‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏: {(users_with_orders or 0) / max(stats['total_users'], 1) * 100:.1f}%"
    )
    
    from keyboards.inline_keyboards import admin_users_back_kb
    
    await callback.message.edit_text(
        text,
        reply_markup=admin_users_back_kb()
    )
    await callback.answer()


# ================== –°–ö–õ–ê–î –¢–û–í–ê–†–û–í ==================

@admin_router.callback_query(F.data == "warehouse_menu")
async def warehouse_menu_callback(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–∫–ª–∞–¥–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    from services.warehouse_service import WarehouseService 
    
    warehouse_service = WarehouseService(session)
    category_stats = await warehouse_service.get_category_stats()
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_products = sum(cat['total_products'] for cat in category_stats)
    total_stock = sum(cat['total_stock'] for cat in category_stats)
    total_unlimited = sum(cat['unlimited_products'] for cat in category_stats)
    
    stock_display = ""
    if total_unlimited > 0:
        stock_display += f"‚àûx{total_unlimited}"
    if total_stock > 0:
        if stock_display:
            stock_display += f" + {total_stock}"
        else:
            stock_display = str(total_stock)
    
    if not stock_display:
        stock_display = "0"

    text = (
        f"üè™ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–º —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n"
        f"üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(category_stats)}\n"
        f"‚Ä¢ –¢–æ–≤–∞—Ä–æ–≤: {total_products}\n"
        f"‚Ä¢ –û—Å—Ç–∞—Ç–æ–∫: {stock_display} —à—Ç.\n\n"
        f"üí° –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–º:"
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=warehouse_menu_kb()
    )
    await callback.answer()


# warehouse_all_products –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ warehouse.py


# warehouse_by_category –∏ warehouse_category_ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–¥–∞–ª–µ–Ω—ã (–±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è)


# warehouse_product_ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ warehouse.py


# warehouse_give_ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ warehouse.py


@admin_router.callback_query(F.data.startswith("warehouse_add_stock_"))
async def warehouse_add_stock_callback(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    product_id = int(callback.data.split("_")[-1])
    
    await state.update_data(product_id=product_id, action="add")
    await state.set_state(AdminStates.waiting_for_stock_quantity)
    
    await callback.message.edit_text(
        "üìà <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=back_button("warehouse_menu")
    )
    await callback.answer()


@admin_router.callback_query(F.data.startswith("warehouse_remove_stock_"))
async def warehouse_remove_stock_callback(callback: CallbackQuery, state: FSMContext):
    """–°–ø–∏—Å–∞—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    product_id = int(callback.data.split("_")[-1])
    
    await state.update_data(product_id=product_id, action="remove")
    await state.set_state(AdminStates.waiting_for_stock_quantity)
    
    await callback.message.edit_text(
        "üìâ <b>–°–ø–∏—Å–∞–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è:",
        reply_markup=back_button("warehouse_menu")
    )
    await callback.answer()


@admin_router.message(AdminStates.waiting_for_stock_quantity)
async def process_stock_quantity(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞ —Ç–æ–≤–∞—Ä–∞"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    try:
        quantity = int(message.text.strip())
        if quantity <= 0:
            raise ValueError()
    except ValueError:
        await message.answer(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ):",
            reply_markup=back_button("warehouse_menu")
        )
        return
    
    data = await state.get_data()
    product_id = data.get('product_id')
    action = data.get('action')
    
    product_service = ProductService(session)
    product = await product_service.get_product_by_id(product_id)
    
    if not product:
        await message.answer(
            "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=back_button("warehouse_menu")
        )
        await state.clear()
        return
    
    if product.is_unlimited:
        await message.answer(
            "‚ùå –ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º",
            reply_markup=back_button("warehouse_menu")
        )
        await state.clear()
        return
    
    if action == "add":
        await product_service.increase_stock(product_id, quantity)
        action_text = "–¥–æ–±–∞–≤–ª–µ–Ω–æ"
        import logging
        logging.info(f"WAREHOUSE: Admin {message.from_user.id} added {quantity} stock to '{product.name}'")
    else:  # remove
        if product.stock_quantity < quantity:
            await message.answer(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è\n"
                f"–î–æ—Å—Ç—É–ø–Ω–æ: {product.stock_quantity}",
                reply_markup=back_button("warehouse_menu")
            )
            return
        
        await product_service.decrease_stock(product_id, quantity)
        action_text = "—Å–ø–∏—Å–∞–Ω–æ"
        import logging
        logging.info(f"WAREHOUSE: Admin {message.from_user.id} removed {quantity} stock from '{product.name}'")
    
    new_stock = await product_service.get_stock_quantity(product_id)
    
    await message.answer(
        f"‚úÖ <b>–û—Å—Ç–∞—Ç–æ–∫ –∏–∑–º–µ–Ω–µ–Ω!</b>\n\n"
        f"üì¶ –¢–æ–≤–∞—Ä: {product.name}\n"
        f"üìä {action_text.capitalize()}: {quantity}\n"
        f"üìà –ù–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫: {new_stock}",
        reply_markup=back_button("warehouse_menu")
    )
    
    await state.clear()


@admin_router.callback_query(F.data == "warehouse_history")
async def warehouse_history_callback(callback: CallbackQuery):
    """–ò—Å—Ç–æ—Ä–∏—è –≤—ã–¥–∞—á —Ç–æ–≤–∞—Ä–æ–≤"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ –ª–æ–≥–æ–≤ –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
    await callback.message.edit_text(
        "üìä <b>–ò—Å—Ç–æ—Ä–∏—è –≤—ã–¥–∞—á</b>\n\n"
        "–ò—Å—Ç–æ—Ä–∏—è –≤—ã–¥–∞—á —Ç–æ–≤–∞—Ä–æ–≤ –≤–µ–¥–µ—Ç—Å—è –≤ –ª–æ–≥–∞—Ö —Å–∏—Å—Ç–µ–º—ã.\n"
        "–ü–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ —Ñ–∞–π–ª–∞—Ö –ª–æ–≥–æ–≤.",
        reply_markup=back_button("warehouse_menu")
    )
    await callback.answer()


@admin_router.callback_query(F.data == "warehouse_stats")
async def warehouse_stats_callback(callback: CallbackQuery, session: AsyncSession):
    """–£–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∞–Ω–∞–ª–∏–∑–æ–º –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    from services.warehouse_service import WarehouseService
    warehouse_service = WarehouseService(session)
    smart_stats = await warehouse_service.get_smart_warehouse_stats()
    
    general = smart_stats['general']
    overflow = smart_stats['overflow']
    
    if general['total_products'] == 0:
        await callback.message.edit_text(
            "üìä <b>–£–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–ª–∞–¥–∞</b>\n\n"
            "‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            reply_markup=back_button("warehouse_menu")
        )
        await callback.answer()
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —É–º–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    text = "üìä <b>–£–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–ª–∞–¥–∞</b>\n\n"
    
    # –û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    text += f"üìÇ <b>–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
    text += f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {general['total_categories']}\n"
    text += f"‚Ä¢ –¢–æ–≤–∞—Ä–æ–≤: {general['total_products']}\n"
    
    # –û—Å—Ç–∞—Ç–∫–∏
    stock_info = []
    if general['total_unlimited'] > 0:
        stock_info.append(f"‚àûx{general['total_unlimited']}")
    if general['total_stock'] > 0:
        stock_info.append(str(general['total_stock']))
    
    stock_display = " + ".join(stock_info) if stock_info else "0"
    text += f"‚Ä¢ –û—Å—Ç–∞—Ç–∫–∏: {stock_display} —à—Ç.\n\n"
    
    # –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    if overflow['total_overflow_products'] > 0:
        text += f"‚ö†Ô∏è <b>–ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:</b>\n"
        text += f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–π —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏: {overflow['categories_with_overflow']}\n"
        text += f"‚Ä¢ –ü–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {overflow['total_overflow_products']}\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        if overflow['top_overflow']:
            text += f"üî• <b>–°–∞–º—ã–µ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:</b>\n"
            for i, item in enumerate(overflow['top_overflow'][:5], 1):
                name = item['name']
                count = item['count']
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–∞–∂–¥–æ–≥–æ –¥—É–±–ª–∏–∫–∞—Ç–∞
                products_info = []
                for product in item['products']:
                    if product['is_unlimited']:
                        products_info.append(f"#{product['id']}:‚àû")
                    else:
                        products_info.append(f"#{product['id']}:{product['stock']}")
                
                products_display = ", ".join(products_info)
                
                # –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫
                total_display = ""
                if item['has_unlimited']:
                    unlimited_count = sum(1 for p in item['products'] if p['is_unlimited'])
                    total_display += f"‚àûx{unlimited_count}"
                if item['total_stock'] > 0:
                    if total_display:
                        total_display += f" + {item['total_stock']}"
                    else:
                        total_display = str(item['total_stock'])
                
                text += f"{i}. ‚ö†Ô∏è <b>{name}</b> ({total_display})\n"
                text += f"   üî¢ –î—É–±–ª–∏–∫–∞—Ç–æ–≤: {count} ({products_display})\n"
                
                if i < len(overflow['top_overflow'][:5]):
                    text += "\n"
            
            if len(overflow['top_overflow']) > 5:
                text += f"\n... –∏ –µ—â–µ {len(overflow['top_overflow']) - 5} –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"
    else:
        text += "‚úÖ <b>–î—É–±–ª–∏–∫–∞—Ç—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã</b>\n\n"
        text += "üí° –í—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–º–µ—é—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è"
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if overflow['total_overflow_products'] > 0:
        text += "\n\nüí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
        text += "‚Ä¢ –û–±—ä–µ–¥–∏–Ω–∏—Ç–µ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ç–æ–≤–∞—Ä—ã\n"
        text += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–¥–∏–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è\n"
        text += "‚Ä¢ –£–¥–∞–ª–∏—Ç–µ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏"
    
    await callback.message.edit_text(
        text,
        reply_markup=back_button("warehouse_menu")
    )
    await callback.answer()
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession


from services import OrderService, ProductService, UserService
from keyboards import (
    admin_menu_kb, admin_orders_kb, order_management_kb, back_button,
    warehouse_menu_kb, warehouse_products_kb, warehouse_product_actions_kb,
    warehouse_categories_kb
)
from utils import format_order_info, format_stats, AdminStates
from repositories import CategoryRepository
from config import settings

admin_router = Router()


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    return user_id in settings.ADMIN_IDS





@admin_router.message(Command("admin"))
async def admin_menu_command(message: Message):
    """–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    await message.answer(
        "‚öôÔ∏è <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>",
        reply_markup=admin_menu_kb()
    )


@admin_router.callback_query(F.data == "admin_menu")
async def admin_menu_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω –º–µ–Ω—é"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    await callback.message.edit_text(
        "‚öôÔ∏è <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>",
        reply_markup=admin_menu_kb()
    )
    await callback.answer()


@admin_router.callback_query(F.data == "admin_orders")
async def admin_orders_callback(callback: CallbackQuery, session: AsyncSession ):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    order_service = OrderService(session)
    orders = await order_service.get_pending_orders()
    
    if not orders:
        await callback.message.edit_text(
            "üì¶ –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏",
            reply_markup=back_button("admin_menu")
        )
        await callback.answer()
        return
    
    await callback.message.edit_text(
        "üì¶ –ó–∞–∫–∞–∑—ã –≤ –æ–∂–∏–¥–∞–Ω–∏–∏:",
        reply_markup=admin_orders_kb(orders)
    )
    await callback.answer()


@admin_router.callback_query(F.data.startswith("admin_order_"))
async def admin_order_details(callback: CallbackQuery, session: AsyncSession ):
    """–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    order_id = int(callback.data.split("_")[2])
    
    order_service = OrderService(session)
    order = await order_service.get_order_details(order_id)
    
    if not order:
        await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    text = "‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–º</b>\n\n"
    text += format_order_info(order)
    text += f"\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {order.user.first_name}"
    if order.user.username:
        text += f" (@{order.user.username})"
    
    await callback.message.edit_text(
        text,
        reply_markup=order_management_kb(order)
    )
    await callback.answer()


@admin_router.callback_query(F.data.startswith("deliver_order_"))
async def deliver_order_callback(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–¥–∞—á–∏ –∑–∞–∫–∞–∑–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    order_id = int(callback.data.split("_")[2])
    
    await state.update_data(order_id=order_id)
    await state.set_state(AdminStates.waiting_for_order_content)
    
    await callback.message.edit_text(
        "üìã –í–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –≤—ã–¥–∞—á–∏ –∑–∞–∫–∞–∑–∞:\n"
        "(–∫–ª—é—á–∏, –∫–æ–¥—ã, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ —Ç.–¥.)",
        reply_markup=back_button("admin_orders")
    )
    await callback.answer()


@admin_router.message(AdminStates.waiting_for_order_content)
async def process_order_delivery(message: Message, state: FSMContext, session: AsyncSession ):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–¥–∞—á—É –∑–∞–∫–∞–∑–∞"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    data = await state.get_data()
    order_id = data.get("order_id")
    digital_content = message.text
    
    order_service = OrderService(session)
    success, result_message = await order_service.deliver_order(
        order_id, digital_content, message.from_user.id
    )
    
    if success:
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        order = await order_service.get_order_details(order_id)
        user_text = "‚úÖ <b>–í–∞—à –∑–∞–∫–∞–∑ –≤—ã–¥–∞–Ω!</b>\n\n"
        user_text += format_order_info(order, show_content=True)
        
        try:
            await message.bot.send_message(
                chat_id=order.user_id,
                text=user_text
            )
        except Exception:
            pass  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
        
        await message.answer(
            f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω!",
            reply_markup=admin_menu_kb()
        )
    else:
        await message.answer(f"‚ùå {result_message}")
    
    await state.clear()


@admin_router.callback_query(F.data.startswith("admin_cancel_order_"))
async def admin_cancel_order_callback(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –æ—Ç–º–µ–Ω—É –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–æ–º"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    order_id = int(callback.data.split("_")[3])
    
    await state.update_data(order_id=order_id)
    await state.set_state(AdminStates.waiting_for_cancel_reason)
    
    await callback.message.edit_text(
        "‚ùå –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞:",
        reply_markup=back_button("admin_orders")
    )
    await callback.answer()


@admin_router.message(AdminStates.waiting_for_cancel_reason)
async def process_order_cancellation(message: Message, state: FSMContext, session: AsyncSession ):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–º–µ–Ω—É –∑–∞–∫–∞–∑–∞"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    data = await state.get_data()
    order_id = data.get("order_id")
    reason = message.text
    
    order_service = OrderService(session)
    success, result_message = await order_service.cancel_order(order_id, reason)
    
    if success:
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        order = await order_service.get_order_details(order_id)
        user_text = f"‚ùå <b>–í–∞—à –∑–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ–Ω–µ–Ω</b>\n\n"
        user_text += f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
        user_text += f"üí∞ –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å: {order.total_price:.2f}‚ÇΩ"
        
        try:
            await message.bot.send_message(
                chat_id=order.user_id,
                text=user_text
            )
        except Exception:
            pass  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
        
        await message.answer(
            f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ–Ω–µ–Ω!",
            reply_markup=admin_menu_kb()
        )
    else:
        await message.answer(f"‚ùå {result_message}")
    
    await state.clear()


@admin_router.callback_query(F.data == "admin_stats")
async def admin_stats_callback(callback: CallbackQuery, session: AsyncSession ):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    from repositories import UserRepository, OrderRepository
    
    user_repo = UserRepository(session)
    order_repo = OrderRepository(session)
    
    user_stats = await user_repo.get_stats()
    order_stats = await order_repo.get_orders_stats(30)
    
    combined_stats = {**user_stats, **order_stats}
    text = format_stats(combined_stats)
    
    await callback.message.edit_text(
        text,
        reply_markup=back_button("admin_menu")
    )
    await callback.answer()





# admin_categories —É–¥–∞–ª–µ–Ω - —É–ø—Ä–æ—â–µ–Ω–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å


@admin_router.callback_query(F.data == "admin_settings")
async def admin_settings_callback(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    text = "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
    text += f"ü§ñ ID –±–æ—Ç–∞: {callback.bot.id}\n"
    text += f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–º–∏–Ω–æ–≤: {len(settings.ADMIN_IDS)}\n"
    text += f"üí∞ –ü—Ä–æ—Ü–µ–Ω—Ç —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {settings.REFERRAL_REWARD_PERCENT}%\n"
    text += f"üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @{settings.SUPPORT_USERNAME}\n"
    text += f"üì¢ –ö–∞–Ω–∞–ª –∑–∞—Ä–∞–±–æ—Ç–∫–∞: {settings.EARNING_CHANNEL}\n\n"
    text += "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª .env"
    
    await callback.message.edit_text(
        text,
        reply_markup=back_button("admin_menu")
    )
    await callback.answer()


@admin_router.callback_query(F.data == "admin_users")
async def admin_users_callback(callback: CallbackQuery, session: AsyncSession ):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (–∑–∞–≥–ª—É—à–∫–∞)"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    user_service = UserService(session)
    from repositories import UserRepository
    
    user_repo = UserRepository(session)
    top_buyers = await user_repo.get_top_buyers(5)
    
    text = "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n"
    text += "üèÜ <b>–¢–æ–ø –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π:</b>\n"
    
    for i, user in enumerate(top_buyers, 1):
        name = user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        text += f"{i}. {name} - {user.total_spent:.2f}‚ÇΩ\n"
    
    await callback.message.edit_text(
        text,
        reply_markup=back_button("admin_menu")
    )
    await callback.answer()


# ================== –°–ö–õ–ê–î –¢–û–í–ê–†–û–í ==================

@admin_router.callback_query(F.data == "warehouse_menu")
async def warehouse_menu_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å–∫–ª–∞–¥–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üè™ <b>–°–∫–ª–∞–¥ —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n"
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏, –æ—Å—Ç–∞—Ç–∫–∞–º–∏ –∏ –≤—ã–¥–∞—á–∞–º–∏",
        reply_markup=warehouse_menu_kb()
    )
    await callback.answer()


# warehouse_all_products –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ warehouse.py


# warehouse_by_category –∏ warehouse_category_ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–¥–∞–ª–µ–Ω—ã (–±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è)


# warehouse_product_ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ warehouse.py


# warehouse_give_ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ warehouse.py


@admin_router.callback_query(F.data.startswith("warehouse_add_stock_"))
async def warehouse_add_stock_callback(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    product_id = int(callback.data.split("_")[-1])
    
    await state.update_data(product_id=product_id, action="add")
    await state.set_state(AdminStates.waiting_for_stock_quantity)
    
    await callback.message.edit_text(
        "üìà <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=back_button("warehouse_menu")
    )
    await callback.answer()


@admin_router.callback_query(F.data.startswith("warehouse_remove_stock_"))
async def warehouse_remove_stock_callback(callback: CallbackQuery, state: FSMContext):
    """–°–ø–∏—Å–∞—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    product_id = int(callback.data.split("_")[-1])
    
    await state.update_data(product_id=product_id, action="remove")
    await state.set_state(AdminStates.waiting_for_stock_quantity)
    
    await callback.message.edit_text(
        "üìâ <b>–°–ø–∏—Å–∞–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è:",
        reply_markup=back_button("warehouse_menu")
    )
    await callback.answer()


@admin_router.message(AdminStates.waiting_for_stock_quantity)
async def process_stock_quantity(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞ —Ç–æ–≤–∞—Ä–∞"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    try:
        quantity = int(message.text.strip())
        if quantity <= 0:
            raise ValueError()
    except ValueError:
        await message.answer(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ):",
            reply_markup=back_button("warehouse_menu")
        )
        return
    
    data = await state.get_data()
    product_id = data.get('product_id')
    action = data.get('action')
    
    product_service = ProductService(session)
    product = await product_service.get_product_by_id(product_id)
    
    if not product:
        await message.answer(
            "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=back_button("warehouse_menu")
        )
        await state.clear()
        return
    
    if product.is_unlimited:
        await message.answer(
            "‚ùå –ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º",
            reply_markup=back_button("warehouse_menu")
        )
        await state.clear()
        return
    
    if action == "add":
        await product_service.increase_stock(product_id, quantity)
        action_text = "–¥–æ–±–∞–≤–ª–µ–Ω–æ"
        import logging
        logging.info(f"WAREHOUSE: Admin {message.from_user.id} added {quantity} stock to '{product.name}'")
    else:  # remove
        if product.stock_quantity < quantity:
            await message.answer(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è\n"
                f"–î–æ—Å—Ç—É–ø–Ω–æ: {product.stock_quantity}",
                reply_markup=back_button("warehouse_menu")
            )
            return
        
        await product_service.decrease_stock(product_id, quantity)
        action_text = "—Å–ø–∏—Å–∞–Ω–æ"
        import logging
        logging.info(f"WAREHOUSE: Admin {message.from_user.id} removed {quantity} stock from '{product.name}'")
    
    new_stock = await product_service.get_stock_quantity(product_id)
    
    await message.answer(
        f"‚úÖ <b>–û—Å—Ç–∞—Ç–æ–∫ –∏–∑–º–µ–Ω–µ–Ω!</b>\n\n"
        f"üì¶ –¢–æ–≤–∞—Ä: {product.name}\n"
        f"üìä {action_text.capitalize()}: {quantity}\n"
        f"üìà –ù–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫: {new_stock}",
        reply_markup=back_button("warehouse_menu")
    )
    
    await state.clear()


@admin_router.callback_query(F.data == "warehouse_history")
async def warehouse_history_callback(callback: CallbackQuery):
    """–ò—Å—Ç–æ—Ä–∏—è –≤—ã–¥–∞—á —Ç–æ–≤–∞—Ä–æ–≤"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ –ª–æ–≥–æ–≤ –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
    await callback.message.edit_text(
        "üìä <b>–ò—Å—Ç–æ—Ä–∏—è –≤—ã–¥–∞—á</b>\n\n"
        "–ò—Å—Ç–æ—Ä–∏—è –≤—ã–¥–∞—á —Ç–æ–≤–∞—Ä–æ–≤ –≤–µ–¥–µ—Ç—Å—è –≤ –ª–æ–≥–∞—Ö —Å–∏—Å—Ç–µ–º—ã.\n"
        "–ü–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ —Ñ–∞–π–ª–∞—Ö –ª–æ–≥–æ–≤.",
        reply_markup=back_button("warehouse_menu")
    )
    await callback.answer()


@admin_router.callback_query(F.data == "warehouse_stats")
async def warehouse_stats_callback(callback: CallbackQuery, session: AsyncSession):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    product_service = ProductService(session)
    products = await product_service.get_all_products()
    
    if not products:
        await callback.message.edit_text(
            "üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤</b>\n\n"
            "–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            reply_markup=back_button("warehouse_menu")
        )
        await callback.answer()
        return
    
    total_products = len(products)
    in_stock = sum(1 for p in products if p.is_unlimited or p.stock_quantity > 0)
    out_of_stock = total_products - in_stock
    unlimited_products = sum(1 for p in products if p.is_unlimited)
    
    total_stock_value = sum(
        p.price * p.stock_quantity 
        for p in products 
        if not p.is_unlimited
    )
    
    text = "üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤</b>\n\n"
    text += f"üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_products}\n"
    text += f"üü¢ –í –Ω–∞–ª–∏—á–∏–∏: {in_stock}\n"
    text += f"üî¥ –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏: {out_of_stock}\n"
    text += f"‚ôæÔ∏è –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ: {unlimited_products}\n\n"
    text += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –æ—Å—Ç–∞—Ç–∫–æ–≤: {total_stock_value:.2f}‚ÇΩ\n\n"
    
    text += "<b>–¢–æ–≤–∞—Ä—ã —Å –Ω–∏–∑–∫–∏–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏:</b>\n"
    low_stock = [p for p in products if not p.is_unlimited and 0 < p.stock_quantity <= 5]
    
    if low_stock:
        for product in low_stock[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
            text += f"‚ö†Ô∏è {product.name}: {product.stock_quantity}\n"
    else:
        text += "‚úÖ –í—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ"
    
    await callback.message.edit_text(
        text,
        reply_markup=back_button("warehouse_menu")
    )
    await callback.answer()
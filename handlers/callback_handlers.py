from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession


from services import UserService, ProductService, OrderService
from keyboards import (
    main_menu_kb, categories_kb, products_kb, product_detail_kb,
    profile_kb, referrals_kb, order_confirmation_kb, user_orders_kb, back_button
)
from utils import format_user_info, format_product_info, format_order_info, OrderForm, log_user_action
from config import settings

callback_router = Router()





@callback_router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.edit_text(
        "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu_kb()
    )
    await callback.answer()


@callback_router.callback_query(F.data == "profile")
async def profile_callback(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    log_user_action(callback.from_user.id, "profile_view", "–û—Ç–∫—Ä—ã–ª –ø—Ä–æ—Ñ–∏–ª—å")
    
    user_service = UserService(session)
    
    user_info = await user_service.get_user_info(callback.from_user.id)
    if not user_info:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    text = format_user_info(
        user_info["user"],
        user_info["referrals_count"]
    )
    
    await callback.message.edit_text(text, reply_markup=profile_kb())
    await callback.answer()


@callback_router.callback_query(F.data == "catalog")
async def catalog_callback(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    log_user_action(callback.from_user.id, "catalog_view", "–û—Ç–∫—Ä—ã–ª –∫–∞—Ç–∞–ª–æ–≥")
    
    product_service = ProductService(session)
    
    categories = await product_service.get_categories_menu()
    
    if not categories:
        await callback.message.edit_text(
            "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
            reply_markup=back_button()
        )
        await callback.answer()
        return
    
    await callback.message.edit_text(
        "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=categories_kb(categories)
    )
    await callback.answer()


@callback_router.callback_query(F.data.startswith("category_"))
async def category_callback(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_id = int(callback.data.split("_")[1])
    log_user_action(callback.from_user.id, "category_select", f"–í—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é {category_id}")
    
    page = 0
    
    product_service = ProductService(session)
    products = await product_service.get_products_by_category(category_id)
    
    if not products:
        await callback.message.edit_text(
            "‚ùå –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤",
            reply_markup=back_button("catalog")
        )
        await callback.answer()
        return
    
    await callback.message.edit_text(
        "üõç –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
        reply_markup=products_kb(products, category_id, page)
    )
    await callback.answer()


@callback_router.callback_query(F.data.startswith("products_"))
async def products_pagination(callback: CallbackQuery, session: AsyncSession ):
    """–ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤"""
    parts = callback.data.split("_")
    category_id = int(parts[1])
    page = int(parts[2])
    
    product_service = ProductService(session)
    products = await product_service.get_products_by_category(category_id)
    
    await callback.message.edit_reply_markup(
        reply_markup=products_kb(products, category_id, page)
    )
    await callback.answer()


@callback_router.callback_query(F.data.startswith("product_"))
async def product_detail_callback(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞"""
    product_id = int(callback.data.split("_")[1])
    log_user_action(callback.from_user.id, "product_view", f"–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–ª —Ç–æ–≤–∞—Ä {product_id}")
    
    product_service = ProductService(session)
    product = await product_service.get_product_details(product_id)
    
    if not product:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
        return
    
    text = format_product_info(product)
    
    await callback.message.edit_text(
        text,
        reply_markup=product_detail_kb(product, user_can_buy=True)
    )
    await callback.answer()


@callback_router.callback_query(F.data.startswith("buy_"))
async def buy_product_callback(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ù–∞—á–∞—Ç—å –ø–æ–∫—É–ø–∫—É —Ç–æ–≤–∞—Ä–∞"""
    try:
        product_id = int(callback.data.split("_")[1])
        print(f"üõí DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø—ã—Ç–∞–µ—Ç—Å—è –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä {product_id}")
        log_user_action(callback.from_user.id, "buy_attempt", f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞ {product_id}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–æ–≤–∞—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(product_id=product_id)
        await state.set_state(OrderForm.waiting_for_confirmation)
        
        print(f"üõí DEBUG: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ waiting_for_confirmation")
    except Exception as e:
        print(f"‚ùå DEBUG: –û—à–∏–±–∫–∞ –≤ –Ω–∞—á–∞–ª–µ buy_product_callback: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)
        return
    
    try:
        order_service = OrderService(session)
        print(f"üõí DEBUG: OrderService —Å–æ–∑–¥–∞–Ω")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        print(f"üõí DEBUG: –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}, —Ç–æ–≤–∞—Ä {product_id}")
        order, message = await order_service.create_order(
            user_id=callback.from_user.id,
            product_id=product_id,
            quantity=1
        )
        
        print(f"üõí DEBUG: –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: order={order is not None}, message='{message}'")
        
        if not order:
            print(f"‚ùå DEBUG: –ó–∞–∫–∞–∑ –Ω–µ —Å–æ–∑–¥–∞–Ω: {message}")
            await callback.answer(f"‚ùå {message}", show_alert=True)
            await state.clear()
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        print(f"üõí DEBUG: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ #{order.id}")
        text = f"üõí <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>\n\n"
        text += format_order_info(order)
        text += f"\nüí∞ –ö —Å–ø–∏—Å–∞–Ω–∏—é: <b>{order.total_price:.2f}‚ÇΩ</b>"
        
        await callback.message.edit_text(
            text,
            reply_markup=order_confirmation_kb(order.id)
        )
        await callback.answer()
        print(f"‚úÖ DEBUG: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        print(f"‚ùå DEBUG: –û—à–∏–±–∫–∞ –≤ buy_product_callback: {e}")
        import traceback
        traceback.print_exc()
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞", show_alert=True)
        await state.clear()


@callback_router.callback_query(F.data.startswith("confirm_order_"))
async def confirm_order_callback(callback: CallbackQuery, state: FSMContext, session: AsyncSession ):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑"""
    order_id = int(callback.data.split("_")[2])
    
    order_service = OrderService(session)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–ø–ª–∞—Ç—É
    success, message = await order_service.process_payment(order_id)
    
    if success:
        order = await order_service.get_order_details(order_id)
        text = "‚úÖ <b>–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω!</b>\n\n"
        text += format_order_info(order)
        text += "\nüìã –í–∞—à –∑–∞–∫–∞–∑ –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        
        await callback.message.edit_text(text, reply_markup=back_button())
    else:
        await callback.answer(f"‚ùå {message}", show_alert=True)
    
    await state.clear()
    await callback.answer()


@callback_router.callback_query(F.data.startswith("cancel_order_"))
async def cancel_order_callback(callback: CallbackQuery, state: FSMContext, session: AsyncSession ):
    """–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑"""
    order_id = int(callback.data.split("_")[2])
    
    order_service = OrderService(session)
    success, message = await order_service.cancel_order(order_id, "–û—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    
    if success:
        await callback.message.edit_text(
            "‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω. –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å.",
            reply_markup=back_button()
        )
    else:
        await callback.answer(f"‚ùå {message}", show_alert=True)
    
    await state.clear()
    await callback.answer()


@callback_router.callback_query(F.data == "cart")
async def cart_callback(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É (–∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)"""
    log_user_action(callback.from_user.id, "cart_view", "–û—Ç–∫—Ä—ã–ª –∫–æ—Ä–∑–∏–Ω—É")
    
    order_service = OrderService(session)
    orders = await order_service.get_user_orders(callback.from_user.id, limit=20)
    
    if not orders:
        await callback.message.edit_text(
            "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞",
            reply_markup=back_button()
        )
        await callback.answer()
        return
    
    await callback.message.edit_text(
        "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:",
        reply_markup=user_orders_kb(orders)
    )
    await callback.answer()


@callback_router.callback_query(F.data.startswith("cart_"))
async def cart_pagination(callback: CallbackQuery, session: AsyncSession):
    """–ü–∞–≥–∏–Ω–∞—Ü–∏—è –∫–æ—Ä–∑–∏–Ω—ã"""
    page = int(callback.data.split("_")[1])
    log_user_action(callback.from_user.id, "cart_pagination", f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}")
    
    order_service = OrderService(session)
    orders = await order_service.get_user_orders(callback.from_user.id, limit=20)
    
    await callback.message.edit_reply_markup(
        reply_markup=user_orders_kb(orders, page)
    )
    await callback.answer()


@callback_router.callback_query(F.data.startswith("order_details_"))
async def order_details_callback(callback: CallbackQuery, session: AsyncSession ):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞"""
    order_id = int(callback.data.split("_")[2])
    
    order_service = OrderService(session)
    order = await order_service.get_order_details(order_id)
    
    if not order or order.user_id != callback.from_user.id:
        await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    text = format_order_info(order, show_content=True)
    
    await callback.message.edit_text(
        text,
        reply_markup=back_button("cart")
    )
    await callback.answer()


@callback_router.callback_query(F.data == "referrals")
async def referrals_callback(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
    log_user_action(callback.from_user.id, "referrals_view", "–û—Ç–∫—Ä—ã–ª —Ä–µ—Ñ–µ—Ä–∞–ª—ã")
    
    user_service = UserService(session)
    
    from services.referral_service import ReferralService
    referral_service = ReferralService(session)
    
    stats = await referral_service.get_referral_stats(callback.from_user.id)
    
    if not stats:
        await callback.answer("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return
    
    text = f"üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n\n"
    text += f"üîó –í–∞—à –∫–æ–¥: <code>{stats['referral_code']}</code>\n"
    text += f"üë• –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>{stats['total_referrals']}</b>\n"
    text += f"üõí –ê–∫—Ç–∏–≤–Ω—ã—Ö: <b>{stats['active_referrals']}</b>\n"
    text += f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>{stats['total_earnings']:.2f}‚ÇΩ</b>\n\n"
    
    bot_username = (await callback.bot.me()).username
    referral_link = f"https://t.me/{bot_username}?start={stats['referral_code']}"
    
    text += f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞:\n<code>{referral_link}</code>\n\n"
    text += f"üí° –ü–æ–ª—É—á–∞–π—Ç–µ {settings.REFERRAL_REWARD_PERCENT}% —Å –ø–æ–∫—É–ø–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤!"
    
    await callback.message.edit_text(text, reply_markup=referrals_kb())
    await callback.answer()


@callback_router.callback_query(F.data == "withdraw_funds")
async def withdraw_funds_callback(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤"""
    log_user_action(callback.from_user.id, "withdraw_request", "–ó–∞–ø—Ä–æ—Å–∏–ª –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤")
    
    user_service = UserService(session)
    user_info = await user_service.get_user_info(callback.from_user.id)
    
    if not user_info:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    user = user_info["user"]
    
    text = f"üí∏ <b>–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤</b>\n\n"
    text += f"üí∞ –î–æ—Å—Ç—É–ø–Ω–æ –∫ –≤—ã–≤–æ–¥—É: <b>{user.referral_earnings:.2f}‚ÇΩ</b>\n\n"
    
    if user.referral_earnings < 100:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
        text += f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: <b>100‚ÇΩ</b>\n"
        text += f"üí° –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞!"
    else:
        text += f"üìû –î–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:\n"
        text += f"üîó @{settings.SUPPORT_USERNAME}\n\n"
        text += f"üìã –£–∫–∞–∂–∏—Ç–µ –≤–∞—à UID: <code>{user.id}</code>"
    
    await callback.message.edit_text(text, reply_markup=back_button("referrals"))
    await callback.answer()



from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from services import UserService, ProductService, OrderService
from keyboards import main_menu_kb, categories_kb, products_kb
from utils import format_user_info, log_user_action
from config import settings

user_router = Router()


@user_router.message(CommandStart())
async def start_handler(message: Message, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    log_user_action(message.from_user.id, "start_command", "–ó–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    user_service = UserService(session)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
    args = message.text.split()
    referral_code = args[1] if len(args) > 1 else None
    
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await user_service.get_or_create_user(
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
        language_code=message.from_user.language_code or "ru"
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–¥
    if referral_code and not user.referrer_id:
        success = await user_service.set_referrer(user.id, referral_code)
        if success:
            await message.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if message.from_user.id in settings.ADMIN_IDS:
        from keyboards.inline_keyboards import admin_menu_kb
        welcome_text = f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name or '–∞–¥–º–∏–Ω'}!\n\n"
        welcome_text += "‚öôÔ∏è <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n"
        welcome_text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º:"
        
        await message.answer(welcome_text, reply_markup=admin_menu_kb())
    else:
        welcome_text = f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name or '–¥—Ä—É–≥'}!\n\n"
        welcome_text += "üõç –≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.\n"
        welcome_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
        
        await message.answer(welcome_text, reply_markup=main_menu_kb())


@user_router.message(Command("menu"))
async def menu_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu"""
    await message.answer("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())


@user_router.message(Command("profile"))
async def profile_handler(message: Message, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile"""
    log_user_action(message.from_user.id, "profile_command", "–í—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /profile")
    
    user_service = UserService(session)
    
    user_info = await user_service.get_user_info(message.from_user.id)
    if not user_info:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    text = format_user_info(
        user_info["user"],
        user_info["referrals_count"]
    )
    
    await message.answer(text, reply_markup=main_menu_kb())


@user_router.message(Command("help"))
async def help_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
ü§ñ <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/profile - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<b>–ö–∞–∫ –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä:</b>
1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ "üõç –ö–∞—Ç–∞–ª–æ–≥" –≤ –º–µ–Ω—é
2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤
3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç–æ–≤–∞—Ä
4Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ "üõí –ö—É–ø–∏—Ç—å"
5Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑

<b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:</b>
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é

<b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:</b>
–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ {:.1f}% —Å –∏—Ö –ø–æ–∫—É–ø–æ–∫!

‚ùì –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
    """.format(settings.REFERRAL_REWARD_PERCENT)
    
    await message.answer(help_text)


@user_router.message(F.text.contains("–ø–æ–∏—Å–∫") | F.text.contains("–Ω–∞–π—Ç–∏"))
async def search_prompt(message: Message):
    """–ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞"""
    await message.answer(
        "üîç –î–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–∏—Å–∫' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é\n"
        "–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –Ω–∞–π—Ç–∏ <–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞>"
    )


@user_router.message(F.text.startswith("–Ω–∞–π—Ç–∏ "))
async def search_handler(message: Message, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
    query = message.text[6:].strip()  # –£–±–∏—Ä–∞–µ–º "–Ω–∞–π—Ç–∏ "
    log_user_action(message.from_user.id, "search_query", f"–ü–æ–∏—Å–∫: {query}")
    
    if len(query) < 2:
        await message.answer("‚ùå –ó–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ú–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.")
        return
    
    product_service = ProductService(session)
    products = await product_service.search_products(query)
    
    if not products:
        await message.answer(f"‚ùå –ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    text = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}':\n\n"
    
    for product in products[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        availability = "‚úÖ" if (product.is_unlimited or product.stock_quantity > 0) else "‚ùå"
        text += f"{availability} <b>{product.name}</b> - {product.price:.2f}‚ÇΩ\n"
        text += f"üìÇ {product.category.name}\n\n"
    
    if len(products) > 10:
        text += f"... –∏ –µ—â–µ {len(products) - 10} —Ç–æ–≤–∞—Ä–æ–≤\n\n"
    
    text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤."
    
    await message.answer(text, reply_markup=main_menu_kb())
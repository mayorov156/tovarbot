"""–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–º"""

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from typing import List
from database.models import Category, Product, ProductType


def product_type_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(
            text="üë§ –ê–∫–∫–∞—É–Ω—Ç (–ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å)",
            callback_data=f"warehouse_type_{ProductType.ACCOUNT.value}"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="üîë –ö–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏",
            callback_data=f"warehouse_type_{ProductType.KEY.value}"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="üé´ –ü—Ä–æ–º–æ–∫–æ–¥",
            callback_data=f"warehouse_type_{ProductType.PROMO.value}"
        )
    )
    builder.row(
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="warehouse_cancel")
    )
    
    return builder.as_markup()


def warehouse_categories_select_kb(categories: List[Category]) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    builder = InlineKeyboardBuilder()
    
    for category in categories:
        builder.row(
            InlineKeyboardButton(
                text=f"üìÇ {category.name}",
                callback_data=f"warehouse_select_category_{category.id}"
            )
        )
    
    builder.row(
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="warehouse_cancel")
    )
    
    return builder.as_markup()


def warehouse_products_select_kb(products: List[Product]) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –≤—ã–¥–∞—á–∏"""
    builder = InlineKeyboardBuilder()
    
    for product in products:
        if product.stock_quantity > 0 or product.is_unlimited:
            stock_info = "‚àû" if product.is_unlimited else str(product.stock_quantity)
            builder.row(
                InlineKeyboardButton(
                    text=f"üì¶ {product.name} ({stock_info} —à—Ç.) - {product.price:.2f}‚ÇΩ",
                    callback_data=f"warehouse_select_product_{product.id}"
                )
            )
    
    if not any((p.stock_quantity > 0 or p.is_unlimited) for p in products):
        builder.row(
            InlineKeyboardButton(
                text="üì≠ –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏",
                callback_data="warehouse_no_products"
            )
        )
    
    builder.row(
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="warehouse_cancel")
    )
    
    return builder.as_markup()


def confirmation_kb(confirm_callback: str, cancel_callback: str = "warehouse_cancel") -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=confirm_callback),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=cancel_callback)
    )
    
    return builder.as_markup()


def add_product_confirmation_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    return confirmation_kb("warehouse_confirm_add_product")


def give_product_confirmation_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞"""
    return confirmation_kb("warehouse_confirm_give_product")


def cancel_kb() -> InlineKeyboardMarkup:
    """–ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="warehouse_cancel")
    )
    
    return builder.as_markup()


def back_to_warehouse_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–∫–ª–∞–¥—É"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üîô –ö —Å–∫–ª–∞–¥—É", callback_data="warehouse_menu")
    )
    
    return builder.as_markup()


def warehouse_action_complete_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ —Å–∫–ª–∞–¥–µ"""
    return warehouse_main_menu_kb()


def warehouse_main_menu_kb() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–∫–ª–∞–¥–∞ —Ç–æ–≤–∞—Ä–æ–≤ - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üì¶ –í—Å–µ —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="warehouse_all_products_compact")
    )
    builder.row(
        InlineKeyboardButton(text="üì• –î–æ–±–∞–≤–∏—Ç—å/–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="warehouse_add_menu")
    )
    builder.row(
        InlineKeyboardButton(text="‚ö° –ë—ã—Å—Ç—Ä–∞—è –≤—ã–¥–∞—á–∞", callback_data="warehouse_quick_give")
    )
    builder.row(
        InlineKeyboardButton(text="üìÇ –°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="warehouse_create_category"),
        InlineKeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="warehouse_stats")
    )
    builder.row(
        InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω –º–µ–Ω—é", callback_data="admin_menu")
    )
    
    return builder.as_markup()


def warehouse_add_menu_kb() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é —Å–ø–æ—Å–æ–±–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="warehouse_add_product")
    )
    builder.row(
        InlineKeyboardButton(text="üì¶ –ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ", callback_data="warehouse_mass_add")
    )
    builder.row(
        InlineKeyboardButton(text="‚ö° –ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ", callback_data="warehouse_quick_add")
    )
    builder.row(
        InlineKeyboardButton(text="üîô –ö —Å–∫–ª–∞–¥—É", callback_data="warehouse_menu")
    )
    
    return builder.as_markup()


def warehouse_quick_master_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ - –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="‚ö° –ë—ã—Å—Ç—Ä–∞—è –≤—ã–¥–∞—á–∞", callback_data="warehouse_quick_give")
    )
    builder.row(
        InlineKeyboardButton(text="üîô –ö —Å–∫–ª–∞–¥—É", callback_data="warehouse_menu")
    )
    
    return builder.as_markup()


def category_created_kb(category_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="warehouse_add_product")
    )
    builder.row(
        InlineKeyboardButton(text="üì¶ –ú–∞—Å—Å–æ–≤–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã", callback_data="warehouse_mass_add")
    )
    builder.row(
        InlineKeyboardButton(text="üîô –ö —Å–∫–ª–∞–¥—É", callback_data="warehouse_menu")
    )
    
    return builder.as_markup()


def warehouse_all_products_kb(products: List[Product], page: int = 0, per_page: int = 5) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º"""
    builder = InlineKeyboardBuilder()
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    start = page * per_page
    end = start + per_page
    page_products = products[start:end]
    
    for product in page_products:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞
        if product.is_unlimited:
            stock_info = "‚àû"
        else:
            stock_info = f"{product.stock_quantity}"
            
        status = "üü¢" if (product.is_unlimited or product.stock_quantity > 0) else "üî¥"
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        builder.row(
            InlineKeyboardButton(
                text=f"{status} {product.name} ({stock_info}) - {product.price:.2f}‚ÇΩ",
                callback_data=f"warehouse_product_info_{product.id}"
            )
        )
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–º
        builder.row(
            InlineKeyboardButton(text="üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"warehouse_edit_{product.id}"),
            InlineKeyboardButton(text="üéØ –í—ã–¥–∞—Ç—å", callback_data=f"warehouse_give_single_{product.id}"),
            InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"warehouse_delete_{product.id}")
        )
    
    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    nav_buttons = []
    
    if page > 0:
        nav_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"warehouse_all_products_page_{page-1}")
        )
    
    if end < len(products):
        nav_buttons.append(
            InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"warehouse_all_products_page_{page+1}")
        )
    
    if nav_buttons:
        builder.row(*nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    builder.row(
        InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="warehouse_all_products")
    )
    builder.row(
        InlineKeyboardButton(text="üîô –ö —Å–∫–ª–∞–¥—É", callback_data="warehouse_menu")
    )
    
    return builder.as_markup()


def create_category_confirmation_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    return confirmation_kb("warehouse_confirm_create_category")


def no_categories_warning_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üìÇ –°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="warehouse_create_category")
    )
    builder.row(
        InlineKeyboardButton(text="üîô –ö —Å–∫–ª–∞–¥—É", callback_data="warehouse_menu")
    )
    
    return builder.as_markup()


def mass_add_confirmation_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"""
    return confirmation_kb("warehouse_confirm_mass_add")


def edit_product_fields_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_field_name")
    )
    builder.row(
        InlineKeyboardButton(text="üì¶ –¢–∏–ø —Ç–æ–≤–∞—Ä–∞", callback_data="edit_field_type")
    )
    builder.row(
        InlineKeyboardButton(text="‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", callback_data="edit_field_duration")
    )
    builder.row(
        InlineKeyboardButton(text="üí∞ –¶–µ–Ω–∞", callback_data="edit_field_price")
    )
    builder.row(
        InlineKeyboardButton(text="üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ", callback_data="edit_field_content")
    )
    builder.row(
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="warehouse_cancel")
    )
    
    return builder.as_markup()


def edit_product_type_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(
            text="üë§ –ê–∫–∫–∞—É–Ω—Ç (–ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å)",
            callback_data=f"edit_type_{ProductType.ACCOUNT.value}"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="üîë –ö–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏",
            callback_data=f"edit_type_{ProductType.KEY.value}"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="üé´ –ü—Ä–æ–º–æ–∫–æ–¥",
            callback_data=f"edit_type_{ProductType.PROMO.value}"
        )
    )
    builder.row(
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="warehouse_cancel")
    )
    
    return builder.as_markup()


def edit_product_confirmation_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    return confirmation_kb("warehouse_confirm_edit_product")


def warehouse_categories_compact_kb(category_stats: List[dict]) -> InlineKeyboardMarkup:
    """–ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–≤–∞—Ä–æ–≤"""
    builder = InlineKeyboardBuilder()
    
    for category in category_stats:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        stock_info = ""
        if category['unlimited_products'] > 0:
            stock_info += f"‚àûx{category['unlimited_products']}"
        if category['total_stock'] > 0:
            if stock_info:
                stock_info += f" + {category['total_stock']}"
            else:
                stock_info = str(category['total_stock'])
        
        if not stock_info:
            stock_info = "0"
        
        button_text = f"üìÇ {category['name']} ({stock_info} —à—Ç.)"
        
        builder.row(
            InlineKeyboardButton(
                text=button_text,
                callback_data=f"warehouse_category_products_{category['id']}"
            )
        )
    
    builder.row(
        InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="warehouse_all_products_compact")
    )
    builder.row(
        InlineKeyboardButton(text="üîô –ö —Å–∫–ª–∞–¥—É", callback_data="warehouse_menu")
    )
    
    return builder.as_markup()


def warehouse_category_products_kb(products: List[Product], category_id: int, category_name: str, page: int = 0, per_page: int = 5) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º"""
    builder = InlineKeyboardBuilder()
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    start = page * per_page
    end = start + per_page
    page_products = products[start:end]
    
    for product in page_products:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞
        if product.is_unlimited:
            stock_info = "‚àû"
        else:
            stock_info = f"{product.stock_quantity}"
            
        status = "üü¢" if (product.is_unlimited or product.stock_quantity > 0) else "üî¥"
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        builder.row(
            InlineKeyboardButton(
                text=f"{status} {product.name} ({stock_info}) - {product.price:.2f}‚ÇΩ",
                callback_data=f"warehouse_product_info_{product.id}"
            )
        )
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–º
        action_buttons = []
        if product.is_unlimited or product.stock_quantity > 0:
            action_buttons.append(
                InlineKeyboardButton(text="üéØ –í—ã–¥–∞—Ç—å", callback_data=f"warehouse_give_single_{product.id}")
            )
        action_buttons.extend([
            InlineKeyboardButton(text="üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"warehouse_edit_{product.id}"),
            InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"warehouse_delete_{product.id}")
        ])
        
        builder.row(*action_buttons)
    
    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    nav_buttons = []
    
    if page > 0:
        nav_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"warehouse_category_products_{category_id}_{page-1}")
        )
    
    if end < len(products):
        nav_buttons.append(
            InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"warehouse_category_products_{category_id}_{page+1}")
        )
    
    if nav_buttons:
        builder.row(*nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    builder.row(
        InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"warehouse_category_products_{category_id}_0")
    )
    builder.row(
        InlineKeyboardButton(text="üîô –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="warehouse_all_products_compact")
    )
    
    return builder.as_markup()
"""–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–º"""

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from typing import List, Optional
from database.models import Category, Product, ProductType


def product_type_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(
            text="üë§ –ê–∫–∫–∞—É–Ω—Ç (–ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å)",
            callback_data=f"warehouse_type_{ProductType.ACCOUNT.value}"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="üîë –ö–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏",
            callback_data=f"warehouse_type_{ProductType.KEY.value}"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="üé´ –ü—Ä–æ–º–æ–∫–æ–¥",
            callback_data=f"warehouse_type_{ProductType.PROMO.value}"
        )
    )
    builder.row(
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="warehouse_cancel")
    )
    
    return builder.as_markup()


def warehouse_categories_select_kb(categories: List[Category]) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    builder = InlineKeyboardBuilder()
    
    for category in categories:
        builder.row(
            InlineKeyboardButton(
                text=f"üìÇ {category.name}",
                callback_data=f"warehouse_select_category_{category.id}"
            )
        )
    
    builder.row(
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="warehouse_cancel")
    )
    
    return builder.as_markup()


def warehouse_products_select_kb(products: List[Product]) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –≤—ã–¥–∞—á–∏"""
    builder = InlineKeyboardBuilder()
    
    for product in products:
        if product.stock_quantity > 0 or product.is_unlimited:
            stock_info = "‚àû" if product.is_unlimited else str(product.stock_quantity)
            builder.row(
                InlineKeyboardButton(
                    text=f"üì¶ {product.name} ({stock_info} —à—Ç.) - {product.price:.2f}‚ÇΩ",
                    callback_data=f"warehouse_select_product_{product.id}"
                )
            )
    
    if not any((p.stock_quantity > 0 or p.is_unlimited) for p in products):
        builder.row(
            InlineKeyboardButton(
                text="üì≠ –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏",
                callback_data="warehouse_no_products"
            )
        )
    
    builder.row(
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="warehouse_cancel")
    )
    
    return builder.as_markup()


def confirmation_kb(confirm_callback: str, cancel_callback: str = "warehouse_cancel") -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=confirm_callback),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=cancel_callback)
    )
    
    return builder.as_markup()


def add_product_confirmation_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    return confirmation_kb("warehouse_confirm_add_product")


def give_product_confirmation_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞"""
    return confirmation_kb("warehouse_confirm_give_product")


def cancel_kb() -> InlineKeyboardMarkup:
    """–ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="warehouse_cancel")
    )
    
    return builder.as_markup()


def back_to_warehouse_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–∫–ª–∞–¥—É"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üîô –ö —Å–∫–ª–∞–¥—É", callback_data="warehouse_menu")
    )
    
    return builder.as_markup()


def warehouse_action_complete_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ —Å–∫–ª–∞–¥–µ —Å –±—ã—Å—Ç—Ä—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏"""
    builder = InlineKeyboardBuilder()
    
    # –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
    builder.row(
        InlineKeyboardButton(text="‚ö° –í—ã–¥–∞—Ç—å –µ—â–µ", callback_data="warehouse_quick_give"),
        InlineKeyboardButton(text="üì¶ –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="warehouse_add_product")
    )
    builder.row(
        InlineKeyboardButton(text="üìä –í—Å–µ —Ç–æ–≤–∞—Ä—ã", callback_data="warehouse_all_products_compact")
    )
    builder.row(
        InlineKeyboardButton(text="üè™ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–∫–ª–∞–¥–∞", callback_data="warehouse_menu")
    )
    builder.row(
        InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω –º–µ–Ω—é", callback_data="admin_menu")
    )
    
    return builder.as_markup()


def warehouse_product_action_complete_kb(category_id: int, page: int = 0, action_type: str = "action") -> InlineKeyboardMarkup:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ç–æ–≤–∞—Ä–æ–º - –≤–æ–∑–≤—Ä–∞—Ç –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é"""
    builder = InlineKeyboardBuilder()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è
    action_buttons = {
        "delete": ("üóë –£–¥–∞–ª–∏—Ç—å –µ—â–µ", f"warehouse_show_category_{category_id}"),
        "edit": ("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ", f"warehouse_show_category_{category_id}"),
        "give": ("üéØ –í—ã–¥–∞—Ç—å –µ—â–µ", "warehouse_quick_give"),
        "add": ("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", f"warehouse_add_to_category_{category_id}")
    }
    
    # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ + –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    action_text, action_callback = action_buttons.get(action_type, ("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", f"warehouse_show_category_{category_id}"))
    builder.row(
        InlineKeyboardButton(text="üìÇ –ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data=f"warehouse_show_category_{category_id}_{page}"),
        InlineKeyboardButton(text=action_text, callback_data=action_callback)
    )
    
    # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ - –±—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
    builder.row(
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data=f"warehouse_add_to_category_{category_id}"),
        InlineKeyboardButton(text="üéØ –í—ã–¥–∞—Ç—å —Ç–æ–≤–∞—Ä", callback_data="warehouse_quick_give")
    )
    
    # –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞ - –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    builder.row(
        InlineKeyboardButton(text="üìä –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="warehouse_menu"),
        InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω –º–µ–Ω—é", callback_data="admin_menu")
    )
    
    return builder.as_markup()


def warehouse_main_menu_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–∫–ª–∞–¥–∞ —Å –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π"""
    builder = InlineKeyboardBuilder()
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    builder.row(
        InlineKeyboardButton(text="üì¶ –í—Å–µ —Ç–æ–≤–∞—Ä—ã", callback_data="warehouse_all_products")
    )
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞–º–∏
    builder.row(
        InlineKeyboardButton(text="üü¢ –¢–æ–≤–∞—Ä—ã —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏", callback_data="warehouse_products_with_stock"),
        InlineKeyboardButton(text="üî¥ –¢–æ–≤–∞—Ä—ã –±–µ–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤", callback_data="warehouse_show_out_of_stock")
    )
    
    # –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    builder.row(
        InlineKeyboardButton(text="üì• –î–æ–±–∞–≤–∏—Ç—å/–ò–º–ø–æ—Ä—Ç", callback_data="warehouse_add_menu"),
        InlineKeyboardButton(text="üéØ –í—ã–¥–∞—Ç—å/–ë—ã—Å—Ç—Ä–æ", callback_data="warehouse_give_menu")
    )
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
    builder.row(
        InlineKeyboardButton(text="üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="warehouse_categories_menu"),
        InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="warehouse_stats")
    )
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏  
    builder.row(
        InlineKeyboardButton(text="üìã –ò—Å—Ç–æ—Ä–∏—è –≤—ã–¥–∞—á", callback_data="warehouse_history"),
        InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="warehouse_display_settings")
    )
    
    builder.row(
        InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω –º–µ–Ω—é", callback_data="admin_menu")
    )
    
    return builder.as_markup()


def warehouse_categories_main_kb() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω —Å–∫–ª–∞–¥–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ –±—ã—Å—Ç—Ä—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏"""
    builder = InlineKeyboardBuilder()
    
    # –≠—Ç–æ—Ç —ç–∫—Ä–∞–Ω –±—É–¥–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è —á–µ—Ä–µ–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    # –ó–¥–µ—Å—å —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    builder.row(
        InlineKeyboardButton(text="üì• –î–æ–±–∞–≤–∏—Ç—å/–ò–º–ø–æ—Ä—Ç", callback_data="warehouse_add_menu"),
        InlineKeyboardButton(text="üéØ –í—ã–¥–∞—Ç—å/–ë—ã—Å—Ç—Ä–æ", callback_data="warehouse_give_menu")
    )
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    builder.row(
        InlineKeyboardButton(text="üìÇ –ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data="warehouse_create_category"),
        InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="warehouse_stats")
    )
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏  
    builder.row(
        InlineKeyboardButton(text="üìã –ò—Å—Ç–æ—Ä–∏—è –≤—ã–¥–∞—á", callback_data="warehouse_history"),
        InlineKeyboardButton(text="üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data="warehouse_management")
    )
    
    builder.row(
        InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω –º–µ–Ω—é", callback_data="admin_menu")
    )
    
    return builder.as_markup()


def warehouse_main_categories_kb(category_stats: List[dict]) -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω —Å–∫–ª–∞–¥–∞ - —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å —Ç–æ–≤–∞—Ä–∞–º–∏"""
    builder = InlineKeyboardBuilder()
    
    if not category_stats:
        # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç
        builder.row(
            InlineKeyboardButton(text="üìÇ –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="warehouse_create_category")
        )
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for category in category_stats:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            stock_info = ""
            if category['unlimited_products'] > 0:
                stock_info += f"‚àûx{category['unlimited_products']}"
            if category['total_stock'] > 0:
                if stock_info:
                    stock_info += f" + {category['total_stock']}"
                else:
                    stock_info = str(category['total_stock'])
            
            if not stock_info:
                stock_info = "0" 
            
            # –ò–∫–æ–Ω–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if category['total_products'] == 0:
                icon = "üìÅ"  # –ü—É—Å—Ç–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
            elif category['unlimited_products'] > 0 or category['total_stock'] > 0:
                icon = "üìÇ"  # –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–æ–≤–∞—Ä–∞–º–∏
            else:
                icon = "üî¥"  # –ö–∞—Ç–µ–≥–æ—Ä–∏—è –±–µ–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤
            
            button_text = f"{icon} {category['name']} ({category['total_products']} —Ç–æ–≤–∞—Ä–æ–≤, {stock_info} —à—Ç.)"
            
            builder.row(
                InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"warehouse_show_category_{category['id']}"
                )
            )
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞–º–∏
    builder.row(
        InlineKeyboardButton(text="üü¢ –¢–æ–≤–∞—Ä—ã —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏", callback_data="warehouse_products_with_stock"),
        InlineKeyboardButton(text="üî¥ –¢–æ–≤–∞—Ä—ã –±–µ–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤", callback_data="warehouse_show_out_of_stock")
    )
    
    # –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤–Ω–∏–∑—É
    builder.row(
        InlineKeyboardButton(text="üì• –î–æ–±–∞–≤–∏—Ç—å/–ò–º–ø–æ—Ä—Ç", callback_data="warehouse_add_menu"),
        InlineKeyboardButton(text="üéØ –í—ã–¥–∞—Ç—å/–ë—ã—Å—Ç—Ä–æ", callback_data="warehouse_give_menu")
    )
    
    builder.row(
        InlineKeyboardButton(text="üìÇ –ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data="warehouse_create_category"),
        InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="warehouse_stats")
    )
    
    builder.row(
        InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="warehouse_menu"),
        InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω –º–µ–Ω—é", callback_data="admin_menu")
    )
    
    return builder.as_markup()


def warehouse_add_menu_kb() -> InlineKeyboardMarkup:
    """–£–ª—É—á—à–µ–Ω–Ω–æ–µ –º–µ–Ω—é —Å–ø–æ—Å–æ–±–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤"""
    builder = InlineKeyboardBuilder()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    builder.row(
        InlineKeyboardButton(text="‚ûï –û–¥–∏–Ω —Ç–æ–≤–∞—Ä", callback_data="warehouse_add_product"),
        InlineKeyboardButton(text="üì¶ –ú–∞—Å—Å–æ–≤–æ", callback_data="warehouse_mass_add")
    )
    
    # –ë—ã—Å—Ç—Ä—ã–µ —Å–ø–æ—Å–æ–±—ã
    builder.row(
        InlineKeyboardButton(text="‚ö° –ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ", callback_data="warehouse_quick_add")
    )
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    builder.row(
        InlineKeyboardButton(text="üìÑ –ò–º–ø–æ—Ä—Ç –∏–∑ —Ñ–∞–π–ª–∞", callback_data="warehouse_import_file"),
        InlineKeyboardButton(text="üîÑ –î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä", callback_data="warehouse_duplicate_product")
    )
    
    builder.row(
        InlineKeyboardButton(text="üîô –ö —Å–∫–ª–∞–¥—É", callback_data="warehouse_menu")
    )
    
    return builder.as_markup()


def warehouse_give_menu_kb() -> InlineKeyboardMarkup:
    """–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ –º–µ–Ω—é –≤—ã–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–æ–≤"""
    builder = InlineKeyboardBuilder()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –≤—ã–¥–∞—á–∏
    builder.row(
        InlineKeyboardButton(text="‚ö° –ë—ã—Å—Ç—Ä–∞—è –≤—ã–¥–∞—á–∞", callback_data="warehouse_quick_give"),
        InlineKeyboardButton(text="üéØ –í—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä", callback_data="warehouse_give_product")  
    )
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
    builder.row(
        InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞", callback_data="warehouse_search_product"),
        InlineKeyboardButton(text="üë• –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="warehouse_find_user")
    )
    
    # –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    builder.row(
        InlineKeyboardButton(text="üì¶ –ú–∞—Å—Å–æ–≤–∞—è –≤—ã–¥–∞—á–∞", callback_data="warehouse_mass_give")
    )
    
    builder.row(
        InlineKeyboardButton(text="üîô –ö —Å–∫–ª–∞–¥—É", callback_data="warehouse_menu")
    )
    
    return builder.as_markup()


def warehouse_quick_master_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ - –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="‚ö° –ë—ã—Å—Ç—Ä–∞—è –≤—ã–¥–∞—á–∞", callback_data="warehouse_quick_give")
    )
    builder.row(
        InlineKeyboardButton(text="üîô –ö —Å–∫–ª–∞–¥—É", callback_data="warehouse_menu")
    )
    
    return builder.as_markup()


def category_created_kb(category_id: int) -> InlineKeyboardMarkup:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –±—ã—Å—Ç—Ä—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏"""
    builder = InlineKeyboardBuilder()
    
    # –ì–ª–∞–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    builder.row(
        InlineKeyboardButton(text="üéØ –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä —Å–µ–π—á–∞—Å", callback_data=f"warehouse_add_to_category_{category_id}"),
        InlineKeyboardButton(text="üì¶ –ú–∞—Å—Å–æ–≤–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å", callback_data=f"warehouse_mass_add_to_category_{category_id}")
    )
    
    # –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    builder.row(
        InlineKeyboardButton(text="‚ö° –ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ", callback_data=f"warehouse_quick_add_to_category_{category_id}")
    )
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    builder.row(
        InlineKeyboardButton(text="üìÇ –°–æ–∑–¥–∞—Ç—å –µ—â–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="warehouse_create_category"),
        InlineKeyboardButton(text="üìä –í—Å–µ —Ç–æ–≤–∞—Ä—ã", callback_data="warehouse_all_products_compact")
    )
    builder.row(
        InlineKeyboardButton(text="üè™ –ö —Å–∫–ª–∞–¥—É", callback_data="warehouse_menu")
    )
    
    return builder.as_markup()


def warehouse_all_products_kb(products: List[Product], page: int = 0, per_page: int = 5) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º"""
    builder = InlineKeyboardBuilder()
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    start = page * per_page
    end = start + per_page
    page_products = products[start:end]
    
    for product in page_products:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞
        if product.is_unlimited:
            stock_info = "‚àû"
        else:
            stock_info = f"{product.stock_quantity}"
            
        status = "üü¢" if (product.is_unlimited or product.stock_quantity > 0) else "üî¥"
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        builder.row(
            InlineKeyboardButton(
                text=f"{status} {product.name} ({stock_info}) - {product.price:.2f}‚ÇΩ",
                callback_data=f"warehouse_product_info_{product.id}"
            )
        )
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–º
        builder.row(
            InlineKeyboardButton(text="üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"warehouse_edit_{product.id}"),
            InlineKeyboardButton(text="üéØ –í—ã–¥–∞—Ç—å", callback_data=f"warehouse_give_single_{product.id}"),
            InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"warehouse_delete_{product.id}")
        )
    
    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    nav_buttons = []
    
    if page > 0:
        nav_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"warehouse_all_products_page_{page-1}")
        )
    
    if end < len(products):
        nav_buttons.append(
            InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"warehouse_all_products_page_{page+1}")
        )
    
    if nav_buttons:
        builder.row(*nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    builder.row(
        InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="warehouse_all_products")
    )
    builder.row(
        InlineKeyboardButton(text="üîô –ö —Å–∫–ª–∞–¥—É", callback_data="warehouse_menu")
    )
    
    return builder.as_markup()


def create_category_confirmation_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    return confirmation_kb("warehouse_confirm_create_category")


def no_categories_warning_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üìÇ –°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="warehouse_create_category")
    )
    builder.row(
        InlineKeyboardButton(text="üîô –ö —Å–∫–ª–∞–¥—É", callback_data="warehouse_menu")
    )
    
    return builder.as_markup()


def mass_add_confirmation_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"""
    return confirmation_kb("warehouse_confirm_mass_add")


def edit_product_fields_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_field_name")
    )
    builder.row(
        InlineKeyboardButton(text="üì¶ –¢–∏–ø —Ç–æ–≤–∞—Ä–∞", callback_data="edit_field_type")
    )
    builder.row(
        InlineKeyboardButton(text="‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", callback_data="edit_field_duration")
    )
    builder.row(
        InlineKeyboardButton(text="üí∞ –¶–µ–Ω–∞", callback_data="edit_field_price")
    )
    builder.row(
        InlineKeyboardButton(text="üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ", callback_data="edit_field_content")
    )
    builder.row(
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="warehouse_cancel")
    )
    
    return builder.as_markup()


def edit_product_type_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(
            text="üë§ –ê–∫–∫–∞—É–Ω—Ç (–ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å)",
            callback_data=f"edit_type_{ProductType.ACCOUNT.value}"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="üîë –ö–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏",
            callback_data=f"edit_type_{ProductType.KEY.value}"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="üé´ –ü—Ä–æ–º–æ–∫–æ–¥",
            callback_data=f"edit_type_{ProductType.PROMO.value}"
        )
    )
    builder.row(
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="warehouse_cancel")
    )
    
    return builder.as_markup()


def edit_product_confirmation_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    return confirmation_kb("warehouse_confirm_edit_product")


def warehouse_categories_compact_kb(category_stats: List[dict]) -> InlineKeyboardMarkup:
    """–ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    builder = InlineKeyboardBuilder()
    
    if not category_stats:
        # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç
        builder.row(
            InlineKeyboardButton(text="üìÇ –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="warehouse_create_category")
        )
        builder.row(
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="warehouse_menu")
        )
        return builder.as_markup()
    
    for category in category_stats:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        stock_info = ""
        if category['unlimited_products'] > 0:
            stock_info += f"‚àûx{category['unlimited_products']}"
        if category['total_stock'] > 0:
            if stock_info:
                stock_info += f" + {category['total_stock']}"
            else:
                stock_info = str(category['total_stock'])
        
        if not stock_info:
            stock_info = "0"
        
        # –ò–∫–æ–Ω–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if category['total_products'] == 0:
            icon = "üìÅ"  # –ü—É—Å—Ç–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        elif category['unlimited_products'] > 0 or category['total_stock'] > 0:
            icon = "üìÇ"  # –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ –Ω–∞–ª–∏—á–∏–∏
        else:
            icon = "üî¥"  # –ö–∞—Ç–µ–≥–æ—Ä–∏—è –±–µ–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤
        
        button_text = f"{icon} {category['name']} ({category['total_products']} —Ç–æ–≤–∞—Ä–æ–≤, {stock_info} —à—Ç.)"
        
        builder.row(
            InlineKeyboardButton(
                text=button_text,
                callback_data=f"warehouse_show_category_{category['id']}"
            )
        )
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞–º–∏
    builder.row(
        InlineKeyboardButton(text="üü¢ –¢–æ–≤–∞—Ä—ã —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏", callback_data="warehouse_products_with_stock"),
        InlineKeyboardButton(text="üî¥ –¢–æ–≤–∞—Ä—ã –±–µ–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤", callback_data="warehouse_show_out_of_stock")
    )
    
    # –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    builder.row(
        InlineKeyboardButton(text="üìÇ –ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data="warehouse_create_category"),
        InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="warehouse_all_products")
    )
    
    builder.row(
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="warehouse_menu")
    )
    
    return builder.as_markup()


def warehouse_display_settings_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤"""
    builder = InlineKeyboardBuilder()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    builder.row(
        InlineKeyboardButton(text="üìã –ü–ª–æ—Å–∫–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="warehouse_set_display_flat"),
        InlineKeyboardButton(text="üóÇ –ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–µ", callback_data="warehouse_set_display_hierarchy")
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    builder.row(
        InlineKeyboardButton(text="üìÑ 5 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ", callback_data="warehouse_set_per_page_5"),
        InlineKeyboardButton(text="üìÑ 10 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ", callback_data="warehouse_set_per_page_10")
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    builder.row(
        InlineKeyboardButton(text="üî§ –ü–æ –∞–ª—Ñ–∞–≤–∏—Ç—É", callback_data="warehouse_set_sort_name"),
        InlineKeyboardButton(text="üìä –ü–æ –æ—Å—Ç–∞—Ç–∫—É", callback_data="warehouse_set_sort_stock")
    )
    
    builder.row(
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="warehouse_menu")
    )
    
    return builder.as_markup()


def warehouse_category_products_kb(products: List[Product], category_id: int, category_name: str, page: int = 0, per_page: int = 10) -> InlineKeyboardMarkup:
    """–ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    builder = InlineKeyboardBuilder()
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    start = page * per_page
    end = start + per_page
    page_products = products[start:end]
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∫–æ–º–ø–∞–∫—Ç–Ω–æ - —Ç–æ–ª—å–∫–æ –ø–æ 1 –∫–Ω–æ–ø–∫–µ –Ω–∞ —Ç–æ–≤–∞—Ä
    for product in page_products:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞
        if product.is_unlimited:
            stock_info = "‚àû"
        else:
            stock_info = f"{product.stock_quantity}"
            
        # –°—Ç–∞—Ç—É—Å –∏–∫–æ–Ω–∫–∞
        if product.is_unlimited or product.stock_quantity > 0:
            status = "üü¢"
        elif product.stock_quantity == 0:
            status = "üî¥"
        else:
            status = "üü°"
        
        # –ö–æ–º–ø–∞–∫—Ç–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ: —Å—Ç–∞—Ç—É—Å, –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ—Å—Ç–∞—Ç–æ–∫, —Ü–µ–Ω–∞
        button_text = f"{status} {product.name[:25]}{'...' if len(product.name) > 25 else ''} ‚Ä¢ {stock_info} —à—Ç ‚Ä¢ {product.price:.0f}‚ÇΩ"
        
        builder.row(
            InlineKeyboardButton(
                text=button_text,
                callback_data=f"warehouse_product_detail_{product.id}_{category_id}_{page}"
            )
        )
    
    # –£–±–∏—Ä–∞–µ–º –º–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    
    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    nav_buttons = []
    
    if page > 0:
        nav_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"warehouse_show_category_{category_id}_{page-1}")
        )
    
    if end < len(products):
        nav_buttons.append(
            InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"warehouse_show_category_{category_id}_{page+1}")
        )
    
    if nav_buttons:
        builder.row(*nav_buttons)
    
    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ - —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ
    builder.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="warehouse_all_products"),
        InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"warehouse_show_category_{category_id}_0")
    )
    
    return builder.as_markup()


def warehouse_product_detail_kb(product_id: int, category_id: int, page: int = 0) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–∞ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏"""
    builder = InlineKeyboardBuilder()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å —Ç–æ–≤–∞—Ä–æ–º
    builder.row(
        InlineKeyboardButton(text="üéØ –í—ã–¥–∞—Ç—å", callback_data=f"warehouse_give_single_{product_id}"),
        InlineKeyboardButton(text="üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"warehouse_edit_{product_id}")
    )
    
    builder.row(
        InlineKeyboardButton(text="üîÑ –î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"warehouse_duplicate_{product_id}"),
        InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"warehouse_delete_{product_id}")
    )
    
    # –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    builder.row(
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Ö–æ–∂–∏–π", callback_data=f"warehouse_add_to_category_{category_id}"),
    )
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è —Å –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π - –≤–æ–∑–≤—Ä–∞—Ç –∫ –µ–¥–∏–Ω–æ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é
    builder.row(
        InlineKeyboardButton(text="üéõ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π", callback_data=f"warehouse_category_management_{category_id}_{page}"),
        InlineKeyboardButton(text="üìÇ –í—Å–µ —Ç–æ–≤–∞—Ä—ã", callback_data="warehouse_all_products")
    )
    
    return builder.as_markup()


def warehouse_error_recovery_kb(category_id: Optional[int] = None, action_type: str = "general") -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏"""
    builder = InlineKeyboardBuilder()
    
    if category_id:
        # –ï—Å–ª–∏ –∑–Ω–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        if action_type == "mass_add":
            builder.row(
                InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑", callback_data=f"warehouse_mass_add_to_category_{category_id}"),
                InlineKeyboardButton(text="üìÇ –ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data=f"warehouse_show_category_{category_id}_0")
            )
            builder.row(
                InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä", callback_data=f"warehouse_add_to_category_{category_id}"),
                InlineKeyboardButton(text="‚ö° –ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ", callback_data=f"warehouse_quick_add_to_category_{category_id}")
            )
        elif action_type == "add_product":
            builder.row(
                InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑", callback_data=f"warehouse_add_to_category_{category_id}"),
                InlineKeyboardButton(text="üìÇ –ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data=f"warehouse_show_category_{category_id}_0")
            )
            builder.row(
                InlineKeyboardButton(text="üì¶ –ú–∞—Å—Å–æ–≤–æ –¥–æ–±–∞–≤–∏—Ç—å", callback_data=f"warehouse_mass_add_to_category_{category_id}"),
                InlineKeyboardButton(text="‚ö° –ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ", callback_data=f"warehouse_quick_add_to_category_{category_id}")
            )
        else:
            # –û–±—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            builder.row(
                InlineKeyboardButton(text="üìÇ –ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data=f"warehouse_show_category_{category_id}_0"),
                InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data=f"warehouse_add_to_category_{category_id}")
            )
            builder.row(
                InlineKeyboardButton(text="üì¶ –ú–∞—Å—Å–æ–≤–æ –¥–æ–±–∞–≤–∏—Ç—å", callback_data=f"warehouse_mass_add_to_category_{category_id}"),
                InlineKeyboardButton(text="üéØ –í—ã–¥–∞—Ç—å —Ç–æ–≤–∞—Ä", callback_data="warehouse_quick_give")
            )
    else:
        # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞, –æ–±—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        builder.row(
            InlineKeyboardButton(text="üì¶ –í—Å–µ —Ç–æ–≤–∞—Ä—ã", callback_data="warehouse_all_products"),
            InlineKeyboardButton(text="üìÇ –°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="warehouse_create_category")
        )
        builder.row(
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="warehouse_add_product"),
            InlineKeyboardButton(text="üéØ –í—ã–¥–∞—Ç—å —Ç–æ–≤–∞—Ä", callback_data="warehouse_quick_give")
        )
    
    # –û–±—â–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    builder.row(
        InlineKeyboardButton(text="üè™ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–∫–ª–∞–¥–∞", callback_data="warehouse_menu"),
        InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω –º–µ–Ω—é", callback_data="admin_menu")
    )
    
    return builder.as_markup()


def warehouse_categories_management_kb(categories: List[Category], category_products_count: dict = None) -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
    builder = InlineKeyboardBuilder()
    
    if not categories:
        # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç
        builder.row(
            InlineKeyboardButton(text="üìÇ –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="warehouse_create_category")
        )
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for category in categories:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è
            if category_products_count and category.id in category_products_count:
                product_count = category_products_count[category.id]
                if product_count == 1:
                    category_info = f"üìÇ {category.name} ({product_count} —Ç–æ–≤–∞—Ä)"
                elif 2 <= product_count <= 4:
                    category_info = f"üìÇ {category.name} ({product_count} —Ç–æ–≤–∞—Ä–∞)"
                else:
                    category_info = f"üìÇ {category.name} ({product_count} —Ç–æ–≤–∞—Ä–æ–≤)"
            else:
                category_info = f"üìÇ {category.name}"
            
            builder.row(
                InlineKeyboardButton(
                    text=category_info,
                    callback_data=f"warehouse_manage_category_{category.id}"
                )
            )
        
        # –î–µ–π—Å—Ç–≤–∏—è —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        builder.row(
            InlineKeyboardButton(text="üìÇ –ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data="warehouse_create_category"),
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="warehouse_categories_menu")
        )
        
        if len(categories) > 1:
            builder.row(
                InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π", callback_data="warehouse_categories_stats"),
                InlineKeyboardButton(text="üóë –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏", callback_data="warehouse_categories_bulk")
            )
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    builder.row(
        InlineKeyboardButton(text="üîô –ö —Å–∫–ª–∞–¥—É", callback_data="warehouse_menu")
    )
    
    return builder.as_markup()


def warehouse_category_management_kb(category_id: int) -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π"""
    builder = InlineKeyboardBuilder()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
    builder.row(
        InlineKeyboardButton(text="üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–æ–≤", callback_data=f"warehouse_show_category_{category_id}_0"),
        InlineKeyboardButton(text="üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"warehouse_edit_category_{category_id}")
    )
    
    # –î–µ–π—Å—Ç–≤–∏—è —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    builder.row(
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data=f"warehouse_add_to_category_{category_id}"),
        InlineKeyboardButton(text="üì¶ –ú–∞—Å—Å–æ–≤–æ –¥–æ–±–∞–≤–∏—Ç—å", callback_data=f"warehouse_mass_add_to_category_{category_id}")
    )
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    builder.row(
        InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"warehouse_category_stats_{category_id}"),
        InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data=f"warehouse_delete_category_{category_id}")
    )
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    builder.row(
        InlineKeyboardButton(text="üìÇ –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="warehouse_categories_menu"),
        InlineKeyboardButton(text="üè™ –ö —Å–∫–ª–∞–¥—É", callback_data="warehouse_menu")
    )
    
    return builder.as_markup()


def warehouse_category_unified_management_kb(
    products: List[Product], 
    category_id: int, 
    category_name: str, 
    page: int = 0, 
    per_page: int = 10
) -> InlineKeyboardMarkup:
    """–ï–¥–∏–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π - –≤–∫–ª—é—á–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è"""
    builder = InlineKeyboardBuilder()
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤
    start = page * per_page
    end = start + per_page
    page_products = products[start:end]
    
    if products:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∫–æ–º–ø–∞–∫—Ç–Ω–æ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        for product in page_products:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞
            if product.is_unlimited:
                stock_info = "‚àû"
                status = "üü¢"
            else:
                stock_info = f"{product.stock_quantity}"
                status = "üü¢" if product.stock_quantity > 0 else "üî¥"
            
            # –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ
            product_name = product.name[:20] + "..." if len(product.name) > 20 else product.name
            button_text = f"{status} {product_name} ‚Ä¢ {stock_info} ‚Ä¢ {product.price:.0f}‚ÇΩ"
            
            builder.row(
                InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"warehouse_product_detail_{product.id}_{category_id}_{page}"
                )
            )
        
        # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
        nav_buttons = []
        if page > 0:
            nav_buttons.append(
                InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"warehouse_category_management_{category_id}_{page-1}")
            )
        if end < len(products):
            nav_buttons.append(
                InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"warehouse_category_management_{category_id}_{page+1}")
            )
        
        if nav_buttons:
            builder.row(*nav_buttons)
            
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        builder.row(
            InlineKeyboardButton(text="‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –î–ï–ô–°–¢–í–ò–Ø –° –¢–û–í–ê–†–ê–ú–ò ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ", callback_data="noop")
        )
    
    # –î–µ–π—Å—Ç–≤–∏—è —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    builder.row(
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data=f"warehouse_add_to_category_{category_id}"),
        InlineKeyboardButton(text="üì¶ –ú–∞—Å—Å–æ–≤–æ –¥–æ–±–∞–≤–∏—Ç—å", callback_data=f"warehouse_mass_add_to_category_{category_id}")
    )
    
    if products:  # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã
        builder.row(
            InlineKeyboardButton(text="‚ö° –ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ", callback_data=f"warehouse_quick_add_to_category_{category_id}"),
            InlineKeyboardButton(text="üéØ –í—ã–¥–∞—Ç—å —Ç–æ–≤–∞—Ä", callback_data="warehouse_quick_give")
        )
        builder.row(
            InlineKeyboardButton(text="üóë –ú–∞—Å—Å–æ–≤–æ —É–¥–∞–ª–∏—Ç—å", callback_data=f"warehouse_mass_delete_category_{category_id}"),
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤", callback_data=f"warehouse_category_products_stats_{category_id}")
        )
    
    # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å  
    builder.row(
        InlineKeyboardButton(text="‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ï–ô ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ", callback_data="noop")
    )
    
    # –î–µ–π—Å—Ç–≤–∏—è —Å —Å–∞–º–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
    builder.row(
        InlineKeyboardButton(text="üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data=f"warehouse_edit_category_{category_id}"),
        InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data=f"warehouse_category_stats_{category_id}")
    )
    
    builder.row(
        InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"warehouse_category_management_{category_id}_{page}"),
        InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data=f"warehouse_delete_category_{category_id}")
    )
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    builder.row(
        InlineKeyboardButton(text="üìÇ –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="warehouse_categories_menu"),
        InlineKeyboardButton(text="üè™ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="warehouse_menu")
    )
    
    return builder.as_markup()


def warehouse_category_action_complete_kb(category_id: int, page: int = 0, action_type: str = "action") -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - –≤–æ–∑–≤—Ä–∞—Ç –∫ –µ–¥–∏–Ω–æ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é"""
    builder = InlineKeyboardBuilder()
    
    # –î–µ–π—Å—Ç–≤–∏–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
    if action_type == "add":
        builder.row(
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data=f"warehouse_add_to_category_{category_id}"),
            InlineKeyboardButton(text="üì¶ –ú–∞—Å—Å–æ–≤–æ –¥–æ–±–∞–≤–∏—Ç—å", callback_data=f"warehouse_mass_add_to_category_{category_id}")
        )
    elif action_type == "edit":
        builder.row(
            InlineKeyboardButton(text="üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ", callback_data=f"warehouse_add_to_category_{category_id}"),
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data=f"warehouse_add_to_category_{category_id}")
        )
    elif action_type == "delete":
        builder.row(
            InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –µ—â–µ", callback_data=f"warehouse_mass_delete_category_{category_id}"),
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data=f"warehouse_add_to_category_{category_id}")
        )
    elif action_type == "give":
        builder.row(
            InlineKeyboardButton(text="üéØ –í—ã–¥–∞—Ç—å –µ—â–µ", callback_data="warehouse_quick_give"),
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"warehouse_category_stats_{category_id}")
        )
    else:
        # –û–±—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        builder.row(
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data=f"warehouse_add_to_category_{category_id}"),
            InlineKeyboardButton(text="üì¶ –ú–∞—Å—Å–æ–≤–æ –¥–æ–±–∞–≤–∏—Ç—å", callback_data=f"warehouse_mass_add_to_category_{category_id}")
        )
    
    # –ì–ª–∞–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ - –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—Ç –∫ –µ–¥–∏–Ω–æ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é
    builder.row(
        InlineKeyboardButton(text="üéõ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π", callback_data=f"warehouse_category_management_{category_id}_{page}"),
        InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"warehouse_category_management_{category_id}_{page}")
    )
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    builder.row(
        InlineKeyboardButton(text="üìÇ –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="warehouse_categories_menu"),
        InlineKeyboardButton(text="üè™ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="warehouse_menu")
    )
    
    return builder.as_markup()


def warehouse_products_with_stock_kb(products: List[Product], page: int = 0, per_page: int = 10, category_id: Optional[int] = None) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    builder = InlineKeyboardBuilder()
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏
    available_products = [p for p in products if p.is_unlimited or p.stock_quantity > 0]
    out_of_stock_products = [p for p in products if not p.is_unlimited and p.stock_quantity <= 0]
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    start = page * per_page
    end = start + per_page
    page_products = available_products[start:end]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
    for product in page_products:
        if product.is_unlimited:
            stock_info = "‚àû"
            status = "üü¢"
        else:
            stock_info = f"{product.stock_quantity}"
            status = "üü¢"
        
        button_text = f"{status} {product.name} ‚Ä¢ {stock_info} —à—Ç ‚Ä¢ {product.price:.0f}‚ÇΩ"
        
        builder.row(
            InlineKeyboardButton(
                text=button_text,
                callback_data=f"warehouse_select_product_{product.id}"
            )
        )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –±–µ–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if out_of_stock_products and page == 0:  # –¢–æ–ª—å–∫–æ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        builder.row(
            InlineKeyboardButton(text="‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ó–ê–ö–û–ù–ß–ò–õ–°–Ø ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ", callback_data="noop")
        )
        
        for product in out_of_stock_products[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
            button_text = f"üî¥ {product.name} ‚Ä¢ –ó–ê–ö–û–ù–ß–ò–õ–°–Ø ‚Ä¢ {product.price:.0f}‚ÇΩ"
            
            builder.row(
                InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"warehouse_product_out_of_stock_{product.id}"
                )
            )
        
        if len(out_of_stock_products) > 3:
            builder.row(
                InlineKeyboardButton(
                    text=f"üî¥ –ò –µ—â–µ {len(out_of_stock_products) - 3} —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å",
                    callback_data="warehouse_show_out_of_stock"
                )
            )
    
    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    nav_buttons = []
    
    if page > 0:
        nav_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"warehouse_products_stock_page_{page-1}")
        )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
    total_pages = (len(available_products) + per_page - 1) // per_page
    if total_pages > 1:
        nav_buttons.append(
            InlineKeyboardButton(text=f"{page+1}/{total_pages}", callback_data="noop")
        )
    
    if end < len(available_products):
        nav_buttons.append(
            InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"warehouse_products_stock_page_{page+1}")
        )
    
    if nav_buttons:
        builder.row(*nav_buttons)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–∞—Ö
    builder.row(
        InlineKeyboardButton(
            text=f"üì¶ –î–æ—Å—Ç—É–ø–Ω–æ: {len(available_products)} | üî¥ –ó–∞–∫–æ–Ω—á–∏–ª–æ—Å—å: {len(out_of_stock_products)}",
            callback_data="noop"
        )
    )
    
    # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if category_id:
        builder.row(
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"warehouse_show_category_{category_id}"),
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="warehouse_products_with_stock")
        )
    else:
        builder.row(
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="warehouse_menu"),
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="warehouse_products_with_stock")
        )
    
    return builder.as_markup()


def warehouse_category_products_with_stock_kb(
    products: List[Product], 
    category_id: int, 
    category_name: str, 
    page: int = 0, 
    per_page: int = 10
) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏"""
    builder = InlineKeyboardBuilder()
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã
    available_products = [p for p in products if p.is_unlimited or p.stock_quantity > 0]
    out_of_stock_products = [p for p in products if not p.is_unlimited and p.stock_quantity <= 0]
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    start = page * per_page
    end = start + per_page
    page_products = available_products[start:end]
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    builder.row(
        InlineKeyboardButton(
            text=f"üìÇ {category_name} ‚Ä¢ {len(available_products)} –¥–æ—Å—Ç—É–ø–Ω–æ ‚Ä¢ {len(out_of_stock_products)} –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å",
            callback_data="noop"
        )
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
    for product in page_products:
        if product.is_unlimited:
            stock_info = "‚àû"
            status = "üü¢"
        else:
            stock_info = f"{product.stock_quantity}"
            status = "üü¢"
        
        # –ö–æ–º–ø–∞–∫—Ç–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        product_name = product.name[:25] + "..." if len(product.name) > 25 else product.name
        button_text = f"{status} {product_name} ‚Ä¢ {stock_info} ‚Ä¢ {product.price:.0f}‚ÇΩ"
        
        builder.row(
            InlineKeyboardButton(
                text=button_text,
                callback_data=f"warehouse_product_detail_{product.id}_{category_id}_{page}"
            )
        )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –±–µ–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å –∏ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
    if out_of_stock_products and page == 0:
        builder.row(
            InlineKeyboardButton(text="‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ó–ê–ö–û–ù–ß–ò–õ–°–Ø ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ", callback_data="noop")
        )
        
        for product in out_of_stock_products[:2]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2
            product_name = product.name[:20] + "..." if len(product.name) > 20 else product.name
            button_text = f"üî¥ {product_name} ‚Ä¢ –ó–ê–ö–û–ù–ß–ò–õ–°–Ø ‚Ä¢ {product.price:.0f}‚ÇΩ"
            
            builder.row(
                InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"warehouse_product_out_of_stock_{product.id}"
                )
            )
        
        if len(out_of_stock_products) > 2:
            builder.row(
                InlineKeyboardButton(
                    text=f"üî¥ –ò –µ—â–µ {len(out_of_stock_products) - 2} —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å",
                    callback_data=f"warehouse_show_category_out_of_stock_{category_id}"
                )
            )
    
    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    nav_buttons = []
    
    if page > 0:
        nav_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"warehouse_category_stock_page_{category_id}_{page-1}")
        )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
    total_pages = (len(available_products) + per_page - 1) // per_page
    if total_pages > 1:
        nav_buttons.append(
            InlineKeyboardButton(text=f"{page+1}/{total_pages}", callback_data="noop")
        )
    
    if end < len(available_products):
        nav_buttons.append(
            InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"warehouse_category_stock_page_{category_id}_{page+1}")
        )
    
    if nav_buttons:
        builder.row(*nav_buttons)
    
    # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    builder.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="warehouse_categories_menu"),
        InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"warehouse_category_products_with_stock_{category_id}_0")
    )
    
    return builder.as_markup()


def warehouse_out_of_stock_products_kb(products: List[Product], page: int = 0, per_page: int = 10, category_id: Optional[int] = None) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤"""
    builder = InlineKeyboardBuilder()
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã –±–µ–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤
    out_of_stock_products = [p for p in products if not p.is_unlimited and p.stock_quantity <= 0]
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    start = page * per_page
    end = start + per_page
    page_products = out_of_stock_products[start:end]
    
    builder.row(
        InlineKeyboardButton(
            text=f"üî¥ –¢–æ–≤–∞—Ä—ã –±–µ–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤ ({len(out_of_stock_products)} —à—Ç.)",
            callback_data="noop"
        )
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –±–µ–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤
    for product in page_products:
        product_name = product.name[:30] + "..." if len(product.name) > 30 else product.name
        button_text = f"üî¥ {product_name} ‚Ä¢ {product.price:.0f}‚ÇΩ"
        
        builder.row(
            InlineKeyboardButton(
                text=button_text,
                callback_data=f"warehouse_product_out_of_stock_{product.id}"
            )
        )
    
    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    nav_buttons = []
    
    if page > 0:
        nav_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"warehouse_out_of_stock_page_{page-1}")
        )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
    total_pages = (len(out_of_stock_products) + per_page - 1) // per_page
    if total_pages > 1:
        nav_buttons.append(
            InlineKeyboardButton(text=f"{page+1}/{total_pages}", callback_data="noop")
        )
    
    if end < len(out_of_stock_products):
        nav_buttons.append(
            InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"warehouse_out_of_stock_page_{page+1}")
        )
    
    if nav_buttons:
        builder.row(*nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    builder.row(
        InlineKeyboardButton(text="üì¶ –î–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏", callback_data="warehouse_add_stock"),
        InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="warehouse_show_out_of_stock")
    )
    
    if category_id:
        builder.row(
            InlineKeyboardButton(text="üìÇ –ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data=f"warehouse_show_category_{category_id}"),
            InlineKeyboardButton(text="üîô –ö —Å–∫–ª–∞–¥—É", callback_data="warehouse_menu")
        )
    else:
        builder.row(
            InlineKeyboardButton(text="üîô –ö —Å–∫–ª–∞–¥—É", callback_data="warehouse_menu")
        )
    
    return builder.as_markup()


def warehouse_stock_summary_kb(categories: List[dict]) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–≤–æ–¥–∫–∏ –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(
            text="üìä –°–≤–æ–¥–∫–∞ –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º",
            callback_data="noop"
        )
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö
    for category in categories:
        available_count = category.get('available_products', 0)
        out_of_stock_count = category.get('out_of_stock_products', 0)
        total_stock = category.get('total_stock', 0)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if available_count > 0:
            status = "üü¢"
        elif out_of_stock_count > 0:
            status = "üî¥"
        else:
            status = "‚ö™"
        
        button_text = f"{status} {category['name']} ‚Ä¢ {available_count} –¥–æ—Å—Ç—É–ø–Ω–æ ‚Ä¢ {out_of_stock_count} –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å"
        
        builder.row(
            InlineKeyboardButton(
                text=button_text,
                callback_data=f"warehouse_category_stock_summary_{category['id']}"
            )
        )
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_available = sum(cat.get('available_products', 0) for cat in categories)
    total_out_of_stock = sum(cat.get('out_of_stock_products', 0) for cat in categories)
    
    builder.row(
        InlineKeyboardButton(
            text=f"üì¶ –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ: {total_available} | üî¥ –ó–∞–∫–æ–Ω—á–∏–ª–æ—Å—å: {total_out_of_stock}",
            callback_data="noop"
        )
    )
    
    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    builder.row(
        InlineKeyboardButton(text="üì¶ –î–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏", callback_data="warehouse_add_stock"),
        InlineKeyboardButton(text="üî¥ –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–æ–Ω—á–∏–≤—à–∏–µ—Å—è", callback_data="warehouse_show_out_of_stock")
    )
    
    builder.row(
        InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="warehouse_stock_summary"),
        InlineKeyboardButton(text="üîô –ö —Å–∫–ª–∞–¥—É", callback_data="warehouse_menu")
    )
    
    return builder.as_markup()


def warehouse_quick_stock_select_kb(products: List[Product], action: str = "give") -> InlineKeyboardMarkup:
    """–ë—ã—Å—Ç—Ä–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏ –¥–ª—è –≤—ã–¥–∞—á–∏"""
    builder = InlineKeyboardBuilder()
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏
    available_products = [p for p in products if p.is_unlimited or p.stock_quantity > 0]
    
    builder.row(
        InlineKeyboardButton(
            text=f"üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –≤—ã–¥–∞—á–∏ ({len(available_products)} –¥–æ—Å—Ç—É–ø–Ω–æ)",
            callback_data="noop"
        )
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏
    for product in available_products[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 —Ç–æ–≤–∞—Ä–∞–º–∏
        if product.is_unlimited:
            stock_info = "‚àû"
        else:
            stock_info = f"{product.stock_quantity}"
        
        product_name = product.name[:25] + "..." if len(product.name) > 25 else product.name
        button_text = f"üü¢ {product_name} ‚Ä¢ {stock_info} ‚Ä¢ {product.price:.0f}‚ÇΩ"
        
        builder.row(
            InlineKeyboardButton(
                text=button_text,
                callback_data=f"warehouse_quick_{action}_{product.id}"
            )
        )
    
    if len(available_products) > 10:
        builder.row(
            InlineKeyboardButton(
                text=f"üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ {len(available_products) - 10} —Ç–æ–≤–∞—Ä–æ–≤",
                callback_data="warehouse_show_more_products"
            )
        )
    
    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    builder.row(
        InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞", callback_data="warehouse_search_product"),
        InlineKeyboardButton(text="üìÇ –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="warehouse_categories_menu")
    )
    
    builder.row(
        InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="warehouse_menu")
    )
    
    return builder.as_markup()


def warehouse_stock_management_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞–º–∏"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üìä –°–≤–æ–¥–∫–∞ –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º", callback_data="warehouse_stock_summary")
    )
    
    builder.row(
        InlineKeyboardButton(text="üü¢ –¢–æ–≤–∞—Ä—ã —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏", callback_data="warehouse_products_with_stock"),
        InlineKeyboardButton(text="üî¥ –¢–æ–≤–∞—Ä—ã –±–µ–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤", callback_data="warehouse_show_out_of_stock")
    )
    
    builder.row(
        InlineKeyboardButton(text="üì¶ –î–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏", callback_data="warehouse_add_stock"),
        InlineKeyboardButton(text="üìã –ò–º–ø–æ—Ä—Ç –æ—Å—Ç–∞—Ç–∫–æ–≤", callback_data="warehouse_import_stock")
    )
    
    builder.row(
        InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="warehouse_stock_notifications"),
        InlineKeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂", callback_data="warehouse_sales_stats")
    )
    
    builder.row(
        InlineKeyboardButton(text="üîô –ö —Å–∫–ª–∞–¥—É", callback_data="warehouse_menu")
    )
    
    return builder.as_markup()
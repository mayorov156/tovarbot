from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from typing import List, Optional
from database.models import Category, Product, Order
from config import settings


def main_menu_kb() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üõç –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog"),
        InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
    )
    builder.row(
        InlineKeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="cart"),
        InlineKeyboardButton(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=f"https://t.me/{settings.SUPPORT_USERNAME}")
    )
    builder.row(
        InlineKeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="referrals")
    )
    
    return builder.as_markup()


def categories_kb(categories: List[Category]) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    builder = InlineKeyboardBuilder()
    
    for category in categories:
        builder.row(
            InlineKeyboardButton(
                text=f"üìÇ {category.name}",
                callback_data=f"category_{category.id}"
            )
        )
    
    builder.row(
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    )
    
    return builder.as_markup()


def products_kb(products: List[Product], category_id: int, page: int = 0, per_page: int = 5) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    builder = InlineKeyboardBuilder()
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    start = page * per_page
    end = start + per_page
    page_products = products[start:end]
    
    for product in page_products:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞
        availability = "‚úÖ" if (product.is_unlimited or product.stock_quantity > 0) else "‚ùå"
        
        builder.row(
            InlineKeyboardButton(
                text=f"{availability} {product.name} - {product.price:.2f}‚ÇΩ",
                callback_data=f"product_{product.id}"
            )
        )
    
    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    nav_buttons = []
    
    if page > 0:
        nav_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"products_{category_id}_{page-1}")
        )
    
    if end < len(products):
        nav_buttons.append(
            InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"products_{category_id}_{page+1}")
        )
    
    if nav_buttons:
        builder.row(*nav_buttons)
    
    builder.row(
        InlineKeyboardButton(text="üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="catalog")
    )
    
    return builder.as_markup()


def product_detail_kb(product: Product, user_can_buy: bool = True) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–∞"""
    builder = InlineKeyboardBuilder()
    
    if user_can_buy and (product.is_unlimited or product.stock_quantity > 0):
        builder.row(
            InlineKeyboardButton(
                text="üõí –ö—É–ø–∏—Ç—å",
                callback_data=f"buy_{product.id}"
            )
        )
    
    builder.row(
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"category_{product.category_id}")
    )
    
    return builder.as_markup()


def order_confirmation_kb(order_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_order_{order_id}"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_order_{order_id}")
    )
    
    return builder.as_markup()


def user_orders_kb(orders: List[Order], page: int = 0, per_page: int = 5) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    builder = InlineKeyboardBuilder()
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    start = page * per_page
    end = start + per_page
    page_orders = orders[start:end]
    
    for order in page_orders:
        status_icon = "‚úÖ" if order.status == "delivered" else "üïê"
        
        builder.row(
            InlineKeyboardButton(
                text=f"{status_icon} –ó–∞–∫–∞–∑ #{order.id} - {order.total_price:.2f}‚ÇΩ",
                callback_data=f"order_details_{order.id}"
            )
        )
    
    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    nav_buttons = []
    
    if page > 0:
        nav_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"cart_{page-1}")
        )
    
    if end < len(orders):
        nav_buttons.append(
            InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"cart_{page+1}")
        )
    
    if nav_buttons:
        builder.row(*nav_buttons)
    
    builder.row(
        InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")
    )
    
    return builder.as_markup()


def admin_menu_kb() -> InlineKeyboardMarkup:
    """–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –∞–¥–º–∏–Ω –º–µ–Ω—é"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üì¶ –ó–∞–∫–∞–∑—ã", callback_data="admin_orders")
    )
    builder.row(
        InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")
    )
    builder.row(
        InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
    )
    builder.row(
        InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")
    )
    builder.row(
        InlineKeyboardButton(text="üè™ –°–∫–ª–∞–¥ —Ç–æ–≤–∞—Ä–æ–≤", callback_data="warehouse_menu")
    )
    builder.row(
        InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")
    )
    
    return builder.as_markup()


def admin_orders_kb(orders: List[Order], page: int = 0, per_page: int = 5) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    builder = InlineKeyboardBuilder()
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    start = page * per_page
    end = start + per_page
    page_orders = orders[start:end]
    
    for order in page_orders:
        status_icons = {
            "pending": "üïê",
            "paid": "üí≥",
            "delivered": "‚úÖ",
            "cancelled": "‚ùå"
        }
        
        icon = status_icons.get(order.status, "‚ùì")
        
        builder.row(
            InlineKeyboardButton(
                text=f"{icon} #{order.id} - {order.product.name} - {order.total_price:.2f}‚ÇΩ",
                callback_data=f"admin_order_{order.id}"
            )
        )
    
    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    nav_buttons = []
    
    if page > 0:
        nav_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"admin_orders_{page-1}")
        )
    
    if end < len(orders):
        nav_buttons.append(
            InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"admin_orders_{page+1}")
        )
    
    if nav_buttons:
        builder.row(*nav_buttons)
    
    builder.row(
        InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω –º–µ–Ω—é", callback_data="admin_menu")
    )
    
    return builder.as_markup()


def order_management_kb(order: Order) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–º –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    builder = InlineKeyboardBuilder()
    
    if order.status in ["pending", "paid"]:
        builder.row(
            InlineKeyboardButton(
                text="‚úÖ –í—ã–¥–∞—Ç—å –∑–∞–∫–∞–∑",
                callback_data=f"deliver_order_{order.id}"
            )
        )
    
    if order.status != "cancelled":
        builder.row(
            InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑",
                callback_data=f"admin_cancel_order_{order.id}"
            )
        )
    
    builder.row(
        InlineKeyboardButton(text="üîô –ö –∑–∞–∫–∞–∑–∞–º", callback_data="admin_orders")
    )
    
    return builder.as_markup()


def profile_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üí∞ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å", url=settings.EARNING_CHANNEL)
    )
    builder.row(
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    )
    
    return builder.as_markup()


def referrals_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üí∏ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤", callback_data="withdraw_funds")
    )
    builder.row(
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    )
    
    return builder.as_markup()


def back_button(callback_data: str = "back_to_menu") -> InlineKeyboardMarkup:
    """–ü—Ä–æ—Å—Ç–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥"""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=callback_data)
    )
    return builder.as_markup()


def confirm_cancel_kb(action: str, item_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"confirm_{action}_{item_id}"),
        InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="cancel_action")
    )
    
    return builder.as_markup()


def warehouse_menu_kb() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–∫–ª–∞–¥–∞ —Ç–æ–≤–∞—Ä–æ–≤ - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üì¶ –í—Å–µ —Ç–æ–≤–∞—Ä—ã", callback_data="warehouse_all_products")
    )
    builder.row(
        InlineKeyboardButton(text="üì• –î–æ–±–∞–≤–∏—Ç—å/–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="warehouse_add_menu")
    )
    builder.row(
        InlineKeyboardButton(text="‚ö° –ë—ã—Å—Ç—Ä—ã–π –º–∞—Å—Ç–µ—Ä", callback_data="warehouse_quick_master")
    )
    builder.row(
        InlineKeyboardButton(text="üìÇ –°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="warehouse_create_category"),
        InlineKeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="warehouse_stats")
    )
    builder.row(
        InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω –º–µ–Ω—é", callback_data="admin_menu")
    )
    
    return builder.as_markup()


def warehouse_products_kb(products: List[Product], page: int = 0, per_page: int = 5, category_filter: str = None) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏"""
    builder = InlineKeyboardBuilder()
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    start = page * per_page
    end = start + per_page
    page_products = products[start:end]
    
    for product in page_products:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞
        if product.is_unlimited:
            stock_info = "‚àû"
        else:
            stock_info = f"{product.stock_quantity}"
            
        status = "üü¢" if (product.is_unlimited or product.stock_quantity > 0) else "üî¥"
        
        builder.row(
            InlineKeyboardButton(
                text=f"{status} {product.name} ({stock_info}) - {product.price:.2f}‚ÇΩ",
                callback_data=f"warehouse_product_{product.id}"
            )
        )
    
    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    nav_buttons = []
    
    if page > 0:
        callback_prefix = f"warehouse_products_{category_filter or 'all'}"
        nav_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"{callback_prefix}_{page-1}")
        )
    
    if end < len(products):
        callback_prefix = f"warehouse_products_{category_filter or 'all'}"
        nav_buttons.append(
            InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"{callback_prefix}_{page+1}")
        )
    
    if nav_buttons:
        builder.row(*nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    if not category_filter:
        builder.row(
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="warehouse_all_products")
        )
    
    builder.row(
        InlineKeyboardButton(text="üîô –°–∫–ª–∞–¥", callback_data="warehouse_menu")
    )
    
    return builder.as_markup()


def warehouse_product_actions_kb(product: Product) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ç–æ–≤–∞—Ä–æ–º –Ω–∞ —Å–∫–ª–∞–¥–µ"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"warehouse_edit_{product.id}"),
        InlineKeyboardButton(text="üéØ –í—ã–¥–∞—Ç—å", callback_data=f"warehouse_give_{product.id}")
    )
    builder.row(
        InlineKeyboardButton(text="üìà –î–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫", callback_data=f"warehouse_add_stock_{product.id}"),
        InlineKeyboardButton(text="üìâ –°–ø–∏—Å–∞—Ç—å –æ—Å—Ç–∞—Ç–æ–∫", callback_data=f"warehouse_remove_stock_{product.id}")
    )
    builder.row(
        InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data=f"warehouse_delete_{product.id}")
    )
    builder.row(
        InlineKeyboardButton(text="üîô –ö —Ç–æ–≤–∞—Ä–∞–º", callback_data="warehouse_all_products")
    )
    
    return builder.as_markup()


def warehouse_categories_kb(categories: List[Category]) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Å–∫–ª–∞–¥–∞"""
    builder = InlineKeyboardBuilder()
    
    for category in categories:
        builder.row(
            InlineKeyboardButton(
                text=f"üìÇ {category.name}",
                callback_data=f"warehouse_category_{category.id}"
            )
        )
    
    builder.row(
        InlineKeyboardButton(text="üîô –°–∫–ª–∞–¥", callback_data="warehouse_menu")
    )
    
    return builder.as_markup()


def admin_users_menu_kb() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üèÜ –¢–æ–ø –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π", callback_data="admin_users_top_buyers")
    )
    builder.row(
        InlineKeyboardButton(text="üìà –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users_active")
    )
    builder.row(
        InlineKeyboardButton(text="üÜï –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users_recent")
    )
    builder.row(
        InlineKeyboardButton(text="üí∞ –° –±–∞–ª–∞–Ω—Å–æ–º", callback_data="admin_users_balance")
    )
    builder.row(
        InlineKeyboardButton(text="üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_users_stats")
    )
    builder.row(
        InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω –º–µ–Ω—é", callback_data="admin_menu")
    )
    
    return builder.as_markup()


def admin_users_back_kb() -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üîô –ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="admin_users")
    )
    
    return builder.as_markup()


def admin_settings_menu_kb() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏—Å—Ç–µ–º—ã"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üí∞ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", callback_data="admin_settings_category_referral")
    )
    builder.row(
        InlineKeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="admin_settings_category_contacts")
    )
    builder.row(
        InlineKeyboardButton(text="üí¨ –°–æ–æ–±—â–µ–Ω–∏—è", callback_data="admin_settings_category_messages")
    )
    builder.row(
        InlineKeyboardButton(text="üí≥ –§–∏–Ω–∞–Ω—Å—ã", callback_data="admin_settings_category_financial")
    )
    # builder.row(
    #     InlineKeyboardButton(text="üìã –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings_all")
    # )
    builder.row(
        InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω –º–µ–Ω—é", callback_data="admin_menu")
    )
    
    return builder.as_markup()


def admin_settings_category_kb(settings: List, category: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    builder = InlineKeyboardBuilder()
    
    for setting in settings:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        value_preview = str(setting.value)
        if len(value_preview) > 20:
            value_preview = value_preview[:17] + "..."
        
        button_text = f"‚öôÔ∏è {setting.description or setting.key}"
        
        builder.row(
            InlineKeyboardButton(
                text=button_text,
                callback_data=f"admin_setting_edit_{setting.id}"
            )
        )
    
    builder.row(
        InlineKeyboardButton(text="üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="admin_settings")
    )
    
    return builder.as_markup()


def admin_setting_edit_kb(setting) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ", callback_data=f"admin_setting_change_{setting.id}")
    )
    
    # –î–ª—è boolean –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–æ–±–∞–≤–ª—è–µ–º –±—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏
    if setting.value_type == "bool":
        current_value = setting.value.lower() in ("true", "1", "yes", "on")
        new_value = not current_value
        
        builder.row(
            InlineKeyboardButton(
                text=f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ {new_value}",
                callback_data=f"admin_setting_toggle_{setting.id}"
            )
        )
    
    builder.row(
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"admin_settings_category_{setting.category}")
    )
    
    return builder.as_markup()


def admin_setting_confirm_kb(setting_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data=f"admin_setting_confirm_{setting_id}"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"admin_setting_edit_{setting_id}")
    )
    
    return builder.as_markup()


def admin_settings_back_kb() -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="admin_settings")
    )
    
    return builder.as_markup()